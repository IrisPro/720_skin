<krpano>

<style name="skin_style" url="calc:settings.root_url + '/krp/skin/skin_v10.png'"/>
<control mouse="moveto" keycodesin="16,65,107" keycodesout="17,89,90,109" bouncinglimits="true" />
<settings
  root_url="%$playerDomain%"
  base_url="%HTMLPATH%/%$playerDomain%/krp/1.20.7/"
  skin_url="%HTMLPATH%/%$playerDomain%/krp/1.19-pr16/"
  
  first_pano_inited="false"

  client="false"

  sound_play_id="play_sound_id"
  sound_playing="false"
  sound_on="true"

  voice_play_id="play_voice_id"
  voice_playing="false"
  voice_on="true"

  bottom_right_btn_width="55"
  menu_btn_width="70"

  pano_thumbs_width="80"
  pano_thumbs_height="80"
  pano_thumbs_padding_v="10"
  pano_thumbs_padding_h="20"

  category_thumbs_width="100"
  category_thumbs_height="100"
  category_thumbs_padding_v="10"
  category_thumbs_padding_h="30"
  category_thumbs_bg_crop="0|0|218|218"
  category_thumbs_bg_crop_selected="218|241|218|218"


  thumb_btn_url="calc:settings.skin_url + 'system/piclist.png'"

  start_image_desktop="calc:settings.skin_url + 'skin/mouseAlert.png'"
  start_image_mobile="calc:settings.skin_url + 'skin/touchAlert.png'"

  circle_mask="calc:settings.skin_url + 'skin/ground-logo.png'"

  rain_image="calc: settings.skin_url + 'skin/rain.png'"
  snow_image="calc: settings.skin_url + 'skin/snow.png'"


  map_zoom_image="calc:settings.skin_url + 'skin/mapZoom.png'"
  close_image="calc:settings.skin_url + 'skin/close.png'"

  embed_txt_image="calc:settings.skin_url + 'skin/embed_txt_bg.png'"
  embed_txt_colored_image="calc:settings.skin_url + 'skin/hotspot_txt_arrow_color.png'"

  weather_image_1="calc:settings.skin_url + 'skin/hongbao.png'"
  weather_image_2="calc:settings.skin_url + 'skin/hongbao1.png'"
  weather_image_3="calc:settings.skin_url + 'skin/hongbao2.png'"

  comment_add_head_bg_image="calc:settings.skin_url + 'skin/comment_add_head_bg.png'"
  comment_edit_line_image="calc:settings.skin_url + 'skin/editLine.png'"
  comment_edit_bg_image="calc:settings.skin_url + 'skin/editBg.png'"

  custom_weather_image_4="calc:settings.skin_url + 'skin/hongbao.png'"
  custom_weather_image_5="calc:settings.skin_url + 'skin/hongbao1.png'"
  custom_weather_image_6="calc:settings.skin_url + 'skin/hongbao2.png'"

  feipai_logo_url="calc:settings.skin_url + 'source/720_feipai.png'"

  blank_music_url="calc:settings.root_url + '/krp/music/blank.mp3'"

/>

<plugin_url
  TEXT_SWF="calc:settings.base_url + 'plugins/textfield.swf'"
  GYRO="calc:settings.base_url + 'plugins/gyro2.js'"
  SOUND_SWF="calc:settings.base_url + 'plugins/soundinterface.swf'"
  SOUND_JS="calc:settings.skin_url + 'plugins/soundinterface.js'"
  SCROLL_SWF="calc:settings.base_url + 'plugins/scrollarea.swf'"
  SCROLL_JS="calc:settings.base_url + 'plugins/scrollarea.js'"
  RADAR_SWF="calc:settings.base_url + 'plugins/radar.swf'"
  RADAR_JS="calc:settings.base_url + 'plugins/radar.js'"
  SNOW_SWF="calc:settings.base_url + 'plugins/snow.swf'"
  SNOW_JS="calc:settings.base_url + 'plugins/snow.js'"
  PLUGINS_SUN_IMAGE="calc:settings.base_url + 'plugins/lensflareset/lensflares.jpg'"
  WEBVR_JS="calc:settings.base_url + 'plugins/webvr.js'"
  WEBVR_XML="calc:settings.base_url + 'plugins/webvr.xml'"
  VIDEO_JS="calc:settings.base_url + 'plugins/krp_video_player_4_pich.js'"
  TWEENTYPES_JS="calc:settings.base_url + 'plugins/moretweentypes.js'"
/>

<plugin url="calc:plugin_url.TWEENTYPES_JS" preload="true"/>

<blendmodes name="blend0"               blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)" />
<blendmodes name="blend1"           blend="ZOOMBLEND(2.0, 2.0, easeInOutSine)" />
<blendmodes name="blend2"            blend="COLORBLEND(2.0, 0x000000, easeOutSine)" />
<blendmodes name="blend3"          blend="LIGHTBLEND(1.0, 0xFFFFFF, 2.0, linear)" />
<blendmodes name="blend4"        blend="SLIDEBLEND(1.0, 0.0, 0.2, linear)" />
<blendmodes name="blend5"             blend="SLIDEBLEND(1.0, 135.0, 0.4, linear)" />
<blendmodes name="blend6"          blend="OPENBLEND(1.0, 0.0, 0.2, 0.0, linear)" />
<blendmodes name="blend7"      blend="OPENBLEND(1.0, -1.0, 0.3, 0.0, linear)" />
<blendmodes name="blend8"      blend="OPENBLEND(1.0, -0.5, 0.3, 0.8, linear)" />



  <action name="showtext_install" autorun="preinit">
    
    set(showtext, action(showtext_xml,%%1,%%2) );
    
    set(showtext_style, DEFAULT);
    set(showtext_prevstyle, null);
    set(showtext_text, '');
    set(showtext_prevtext, '');
    set(showtext_timeout, 0.1);
    set(showtext_fadeout, 0.0);
    set(showtext_clipping, false);
  </action>


  <action name="showtext_xml">
    set(showtext_style, DEFAULT);
    if(%2 != null, ifnot(textstyle[%2], trace('textstyle "%2" not found'); , set(showtext_style,%2)); );

    set(showtext_text, %1);
    if(showtext_text != showtext_prevtext,
      copy(showtext_prevtext, showtext_text);
      showtext_createnewtext();
      ,
      delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );
      );
  </action>


  <action name="showtext_createnewtext">
    
    stopdelayedcall(showtext_mouseupdates);
    stoptween(layer[showtext_tf].alpha);

    
    if(showtext_style != showtext_prevstyle,
      copy(showtext_prevstyle, showtext_style);
      removelayer(showtext_tf);
      );

    
    addlayer(showtext_tf);

    
    copy(tf, layer[showtext_tf]);
    copy(ts, textstyle[get(showtext_style)]);

    
    if(ts.origin  !== null, copy(ts_origin,  ts.origin),  set(ts_origin, 'cursor'));
    if(ts.edge    !== null, copy(ts_edge,    ts.edge),    set(ts_edge, 'bottom'));
    if(ts.xoffset !== null, copy(ts_xoffset, ts.xoffset), set(ts_xoffset, 0));
    if(ts.yoffset !== null, copy(ts_yoffset, ts.yoffset), set(ts_yoffset, -3));

    
    if(ts_origin == 'cursor',
      set(tf.align, 'lefttop');
      showtext_movetomouse();
      ,
      copy(tf.align, ts_origin);
      );
    copy(tf.edge, ts_edge);
    copy(tf.ox, ts_xoffset);
    copy(tf.oy, ts_yoffset);

    
    if(ts.font      !== null, copy(ts_font,      ts.font),      set(ts_font, 'Times'));
    if(ts.fontsize  !== null, copy(ts_fontsize,  ts.fontsize),  set(ts_fontsize, 12.0));
    if(ts.bold      !== null, copy(ts_bold,      ts.bold),      set(ts_bold, true));
    if(ts.italic    !== null, copy(ts_italic,    ts.italic),    set(ts_italic, false));
    if(ts.textcolor !== null, copy(ts_textcolor, ts.textcolor), set(ts_textcolor, 0x000000));
    if(ts.textalign !== null, copy(ts_textalign, ts.textalign), set(ts_textalign, 'left'));

    
    set(tf_css, '');
    tohex(ts_textcolor, '#', 6);
    txtadd(tf_css, 'font-family:',get(ts_font),'; font-size:',get(ts_fontsize),'px; color:',get(ts_textcolor),'; ');
    if(ts_textalign != 'none', txtadd(tf_css, get(tf_css), 'text-align:',get(ts_textalign),'; '));
    if(ts_bold,   txtadd(tf_css, 'font-weight:bold; '));
    if(ts_italic, txtadd(tf_css, 'font-style:italic; '));
    if(ts.css !== null, txtadd(tf_css, get(ts.css)));
    copy(tf.css, tf_css);

    
    if(ts.width   !== null, copy(tf.width,   ts.width));
    if(ts.height  !== null, copy(tf.height,  ts.height));
    if(ts.vcenter !== null, copy(tf.vcenter, ts.vcenter));
    if(ts.padding !== null, copy(tf.padding, ts.padding), set(tf.padding,1));

    
    if(ts.background      !== null, copy(tf.background,      ts.background));
    if(ts.backgroundcolor !== null, copy(tf.backgroundcolor, ts.backgroundcolor));
    if(ts.backgroundalpha !== null, copy(tf.backgroundalpha, ts.backgroundalpha));
    if(ts.border          !== null, copy(tf.border,          ts.border), set(tf.border,true));
    if(ts.bordercolor     !== null, copy(tf.bordercolor,     ts.bordercolor));
    if(ts.borderalpha     !== null, copy(tf.borderalpha,     ts.borderalpha));
    if(ts.borderwidth     !== null, copy(tf.borderwidth,     ts.borderwidth));
    if(ts.roundedge       !== null, copy(tf.roundedge,       ts.roundedge));
    if(ts.shadow          !== null, copy(tf.shadow,          ts.shadow));
    if(ts.shadowrange     !== null, copy(tf.shadowrange,     ts.shadowrange));
    if(ts.shadowangle     !== null, copy(tf.shadowangle,     ts.shadowangle));
    if(ts.shadowcolor     !== null, copy(tf.shadowcolor,     ts.shadowcolor));
    if(ts.shadowalpha     !== null, copy(tf.shadowalpha,     ts.shadowalpha));
    if(ts.textshadow      !== null, copy(tf.textshadow,      ts.textshadow));
    if(ts.textshadowrange !== null, copy(tf.textshadowrange, ts.textshadowrange));
    if(ts.textshadowangle !== null, copy(tf.textshadowangle, ts.textshadowangle));
    if(ts.textshadowcolor !== null, copy(tf.textshadowcolor, ts.textshadowcolor));
    if(ts.textshadowalpha !== null, copy(tf.textshadowalpha, ts.textshadowalpha));

    
    if(ts.alpha      !== null, copy(ts_alpha,      ts.alpha),      set(ts_alpha, 1.0));
    if(ts.showtime   !== null, copy(ts_showtime,   ts.showtime),   set(ts_showtime, 0.1));
    if(ts.fadetime   !== null, copy(ts_fadetime,   ts.fadetime),   set(ts_fadetime, 0.0));
    if(ts.fadeintime !== null, copy(ts_fadeintime, ts.fadeintime), set(ts_fadeintime, 0.0));
    copy(showtext_timeout, ts_showtime);
    copy(showtext_fadeout, ts_fadetime);
    if(ts_fadeintime GT 0,
      set(tf.alpha, 0.0);
      tween(layer[showtext_tf].alpha, get(ts_alpha), get(ts_fadeintime), linear);
      ,
      copy(tf.alpha, ts_alpha);
      );

    if(ts.noclip !== null, copy(showtext_clipping,ts.noclip), set(showtext_clipping, true));

    if(showtext_clipping,
      set(tf.onloaded,    showtext_do_clipping() );
      set(tf.onautosized, showtext_do_clipping() );
      );

    
    if(ts.embeddedfonts !== null, copy(tf.embeddedfonts, ts.embeddedfonts));
    if(ts.effect        !== null, copy(tf.effect,        ts.effect));
    if(ts.blendmode     !== null, copy(tf.blendmode,     ts.blendmode));

    
    copy(tf.html, showtext_text);
    set(tf.enabled, false);
    set(tf.zorder, 3000);
    if(ts.parent, copy(tf.parent, ts.parent) );
    set(tf.url,get(plugin_url.TEXT_SWF));


    
    delete(ts);
    delete(tf);

    
    delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );
  </action>


  <action name="showtext_do_clipping">
    if(showtext_clipping,
      layer[showtext_tf].updatepos();
      copy(tf_px, layer[showtext_tf].pixelx);
      copy(tf_py, layer[showtext_tf].pixely);
      if(tf_px LT 0,
        sub(layer[showtext_tf].x, tf_px);
        ,
        add(tf_rightedge, tf_px, layer[showtext_tf].pixelwidth);
        if(tf_rightedge GE stagewidth, sub(tf_rightedge,stagewidth); sub(layer[showtext_tf].x,tf_rightedge); );
        );
      if(tf_py LT 0,
        sub(layer[showtext_tf].y,  tf_py);
        ,
        add(tf_bottomedge, tf_py, layer[showtext_tf].pixelheight);
        if(tf_bottomedge GE stageheight, sub(tf_bottomedge,stageheight); sub(layer[showtext_tf].y,tf_bottomedge); );
        );
      );
  </action>


  <action name="showtext_movetomouse">
    copy(layer[showtext_tf].x, mouse.stagex);
    copy(layer[showtext_tf].y, mouse.stagey);
    showtext_do_clipping();
    delayedcall(showtext_mouseupdates, 0, showtext_movetomouse() );
  </action>


  <action name="showtext_hide">
    if(layer[showtext_tf],
      tween(layer[showtext_tf].alpha, 0.0, get(showtext_fadeout), linear,
          stopdelayedcall(showtext_mouseupdates);
          removelayer(showtext_tf);
          set(showtext_text, '');
          set(showtext_prevtext, '');
        );
      );
  </action>



  <textstyle name="tooltipTextStyle"
           font="STXihei"   fontsize.no-mobile="14" fontsize.mobile="18" bold="false"
             background="true" backgroundcolor="0x000000" backgroundalpha="0.667"
             border="true" borderwidth="2" bordercolor="0xFFFFFF" roundedge="5"
             textcolor="0xFFFFFF"
             padding="6 10"
             textalign="center"
             yoffset.no-touch="-5"
             yoffset.touch="-40"

           />
<events
    onsingleclick="on_single_click();"
    ondoubleclick="on_double_click();"
    onautorotateoneround="load_pano_loop();"
    onloadcomplete="on_load_complete();"
    onviewchange="on_view_changed();"
    onclick="on_click();"
    />

<action name="on_click">
  if(useMarkMode == true,
    screentosphere(mouse.x,mouse.y, hclick,vclick);
    clickToAddFlag();
  );
</action>

<action name="on_single_click">
  js_playerClickCallback();
</action>
<action name="on_double_click">
  js_playerDoubleClickCallback();
</action>
<action name="on_load_complete">
  js_sceneLoadedCallback();
</action>

<action name="on_view_changed">
  js_viewChangedCallback();
</action>

<action name="clickToAddFlag">
  krpAddSelfMark(get(hclick), get(vclick));
  set(js_command, '{"type":1, "action":0, "to":"", "payload":["krpAddMark(');
  txtadd(js_command, get(hclick));
  txtadd(js_command, ',');
  txtadd(js_command, get(vclick));
  txtadd(js_command, ',');
  txtadd(js_command, get(daikanAvatar));
  txtadd(js_command, ',');
  txtadd(js_command, get(daikanNickname));
  txtadd(js_command, ');"]}');
  js_sendCommand(get(js_command));
  js_App('krpFlagClick', get(hclick), get(vclick));

  
</action>
<layer name="radar_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="fasle" visible="true" bgcapture="false" zorder="10">
    <layer name="radar_layer" keep="true" type="container" align="topright" width="100%" height="100%" maskchildren="false" visible="true" bgcapture="false" zorder="10"/>
</layer>

<action name="show_UI">
  set(layer[radar_container].visible,true);
  set(layer[radarBtn].visible,true);
  if(%1 != 1,
    js_toggleUI(true);
  );
</action>
<action name="hide_UI">
  if(%1 != 1,
    set(layer[radar_container].visible,false);
    set(layer[radarBtn].visible,false);
  );
  if(%2 != 1,
    js_toggleUI(false);
  );
</action>

<action name="js_viewChangedCallback">
  set(js_command, 'interfaceObject.viewDidChangeCallback()');
  jscall(get(js_command));
  js_App('krpViewChange', get(view.hlookat), get(view.vlookat), get(view.fov));
</action>

<action name="js_showViewType">
  set(js_command, 'interfaceObject.showViewType()');
  jscall(get(js_command));
</action>


<action name="js_toggleLoading">
  set(js_command, calc('interfaceObject.toggleLoading(' + %1 + ')'));
  jscall(get(js_command));
</action>

<action name="js_playerReadyCallback">
  set(js_command, 'interfaceObject.playerDidReadyCallback()');
  
</action>

<action name="js_playerClickCallback">
  set(js_command, 'interfaceObject.playerDidClickCallback()');
  jscall(get(js_command));
</action>

<action name="js_playerDoubleClickCallback">
  set(js_command, 'interfaceObject.playerDidDoubleClickCallback()');
  jscall(get(js_command));
</action>

<action name="js_sceneReadyCallback">
  set(js_command, 'interfaceObject.sceneDidChangeCallback()');
  jscall(get(js_command));
</action>

<action name="js_sceneLoadedCallback">
  set(js_command, 'interfaceObject.sceneDidLoadedCallback()');
  jscall(get(js_command));
</action>



<action name="js_sceneChangeCallback">
  set(jscall_scene_id,%1);
  if(%2 === null,
    set(js_command, calc('interfaceObject.loadScene("' + jscall_scene_id + '")'));
    ,
    set(jscall_blend_mode,%2);
    set(js_command, calc('interfaceObject.loadScene("' + jscall_scene_id + '",' + jscall_blend_mode + ')'));
  );
  jscall(get(js_command));
</action>


<action name="js_panoChangeCallback">
  set(jscall_pano_id,%1);
  if(%2 === null,
    set(js_command, calc('interfaceObject.loadSceneByPanoID(' + jscall_pano_id + ')'));
    ,
    set(jscall_blend_mode,%2);
    set(js_command, calc('interfaceObject.loadSceneByPanoID(' + jscall_pano_id + ',' + jscall_blend_mode + ')'));
  );
  jscall(get(js_command));
</action>


<action name="js_hotspotClickCallback">
  set(jscall_hotspot_id,%1);
  js_App('krpHotspotClick', get(jscall_hotspot_id));
  set(js_command, calc('interfaceObject.hotspotDidClickCallback("' + jscall_hotspot_id + '")'));
  jscall(get(js_command));
</action>


<action name="js_toggleUI">
  set(js_command, calc('interfaceObject.toggleUI(' + %1 + ')'));
  jscall(get(js_command));
</action>


<action name="js_radarMapStatusDidChangeCallback">
  set(js_command, calc('interfaceObject.radarMapStatusDidChangeCallback(' + %1 + ')'));
  jscall(get(js_command));
</action>


<action name="js_radarMapFullscreenStatusDidChangeCallback">
  set(js_command, calc('interfaceObject.radarMapFullscreenStatusDidChangeCallback(' + %1 + ')'));
  jscall(get(js_command));
</action>


<action name="js_showAutoTourSubtitle">
  set(jscall_autotour_subtitle_text, %1);
  set(jscall_autotour_subtitle_position, %2);
  set(jscall_autotour_subtitle_size, %3);
  set(jscall_autotour_subtitle_background, %4);
  set(js_command, calc('interfaceObject.showAutoTourSubtitle("' + jscall_autotour_subtitle_text + '","' + jscall_autotour_subtitle_position + '",' + jscall_autotour_subtitle_size + ',"' + jscall_autotour_subtitle_background + '")'));
  jscall(get(js_command));
</action>

<action name="js_hideAutoTourSubtitle">
  set(js_command, 'interfaceObject.hideAutoTourSubtitle()');
  jscall(get(js_command));
</action>


<action name="js_toggleAutoTourUI">
  set(js_command, calc('interfaceObject.toggleAutoTourUI(' + %1 + ')'));
  jscall(get(js_command));
</action>


<action name="js_autoTourEndCallback">
  set(js_command, 'interfaceObject.autoTourEndCallback()');
  jscall(get(js_command));
  unmuted_embed_video();
</action>


<action name="js_vrUnavailableCallback">
  set(js_command, 'interfaceObject.unavailableCallback("vr")');
  jscall(get(js_command));
</action>

<action name="js_exitVRCallback">
  set(js_command, 'interfaceObject.vrDidExitCallback()');
  jscall(get(js_command));
</action>

<action name="js_playSound">
  set(jscall_id,%1);
  set(jscall_url,%2);
  set(js_command, calc('interfaceObject.playSound("' + jscall_id + '","' + jscall_url + '")'));
  jscall(get(js_command));
</action>

<action name="js_pauseSound">
  set(jscall_id,%1);
  set(js_command, calc('interfaceObject.pauseSound("' + jscall_id + '")'));
  jscall(get(js_command));
</action>

<action name="js_resumeSound">
  set(jscall_id,%1);
  set(js_command, calc('interfaceObject.resumeSound("' + jscall_id + '")'));
  jscall(get(js_command));
</action>

<action name="js_stopSound">
  set(jscall_id,%1);
  set(js_command, calc('interfaceObject.stopSound("' + jscall_id + '")'));
  jscall(get(js_command));
</action>


<action name="js_toggleBgMusic">
  set(js_command, calc('interfaceObject.toggleMusic(' + %1 + ')'));
  jscall(get(js_command));
</action>

<action name="js_toggleBgVoice">
  set(js_command, calc('interfaceObject.toggleVoice(' + %1 + ')'));
  jscall(get(js_command));
</action>

<action name="js_toggleComments">
  set(js_command, calc('interfaceObject.toggleComments(' + %1 + ')'));
  jscall(get(js_command));
</action>

<action name="js_toggleFullscreen">
  if(fullscreen == true,
    set(js_command, false);
    ,
    set(js_command, true);
  );
  set(js_command, calc('interfaceObject.toggleFullscreen(' + js_command + ')'));
  jscall(get(js_command));
</action>

<action name="js_mouseControlChangedCallback">
  set(jscall_state,%1);
  set(js_command, calc('interfaceObject.mouseControlChangedCallback("' + jscall_state + '")'));
  jscall(get(js_command));
</action>

<action name="js_openReport">
  set(js_command, calc('interfaceObject.openReport()'));
  jscall(get(js_command));
</action>

<action name="js_sendCommand">
  set(js_command, 'interfaceObject.sendCommand("%1")');
  jscall(get(js_command));
</action>

<action name="js_closeOverlay">
  set(js_command, 'interfaceObject.toggleInfo(false)');
  jscall(get(js_command));
</action>


<action name="js_App">
  if(device.ios,
    js_iOS(%1,%2, %3, %4);
  );
  if(device.android,
    js_Android(%1,%2, %3, %4);
  );
</action>
<action name="js_Android">
  set(command_action, %1);
  set(command_arg1, %2);
  set(js_command, calc('window.androidInterface.' + command_action + '("' + command_arg1));
  if(%3 !== null,
    set(command_arg2, %3);
    txtadd(js_command, calc('","' + command_arg2));
  );
  if(%4 !== null,
    set(command_arg3, %4);
    txtadd(js_command, calc('","' + command_arg3));
  );
  txtadd(js_command, '")');
  jscall(get(js_command));
</action>
<action name="js_iOS">
  set(command_action, %1);
  set(command_arg1, %2);
  set(js_command, calc('window.webkit.messageHandlers.' + command_action + '.postMessage(["' + command_arg1));
  if(%3 !== null,
    set(command_arg2, %3);
    txtadd(js_command, calc('","' + command_arg2));
  );
  if(%4 !== null,
    set(command_arg3, %4);
    txtadd(js_command, calc('","' + command_arg3));
  );
  txtadd(js_command, '"])');
  jscall(get(js_command));
</action>


<action name="js_request_gyro_promission">
  
</action>
<action name="krpSceneChange">
  set(sceneChange_id, %1);
  set(sceneChange_effect, %2);
  set(sceneChange_keepView, %3);
  if(sceneChange_id != 's_NaN',
    load_pano_by_id(get(sceneChange_id), get(sceneChange_keepView), get(sceneChange_effect));
    js_App('krpSceneChange', get(sceneChange_id));
    ,
    js_toggleLoading(false);
  );
</action>


<action name="krpAddTextHotspot">
  add_text_hotspot(%1,%2,%3,%4,%5,%6,%7,%8);
</action>

<action name="krpRemoveTextHotspot">
  remove_text_hotspot(%1);
</action>

<action name="krpUpdateTextHotspotColor">
  update_text_hotspot_color(%1,%2,%3,%4,%5);
</action>


<action name="krpAddHotspot">
  add_hotspot(%1,%2,%3,%4,%5,%6,%7,%8,%9,%10,%11);
</action>


<action name="krpAddPolygonalHotspot">
  add_polygon(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14);
</action>



<action name="krpAddComment">
  addComment(%1,%2,%3,%4,%5);
</action>


<action name="krpToggleComments">
  if(%1 == true,
    showComments();
    ,
    hideComments();
  );
</action>


<action name="krpBeginNewComment">
  enterEditComment(%1);
</action>

<action name="krpEndNewComment">
  exitEditComment();
</action>


<action name="krpUpdateNewComment">
  updateInputComment(%1);
</action>

<action name="krpRemoveComments">
  removeComments();
</action>

<action name="krpStartAutoTour">
  autoTourStart();
  muted_embed_video();
</action>

<action name="krpPauseAutoTour">
  autoTourPause();
</action>

<action name="krpResumeAutoTour">
  autoTourResume();
</action>

<action name="krpStopAutoTour">
  autoTourEndAction(true);
</action>


<action name="krpToggleRadarMap">
  if(%1 == true AND radarIsShow != true,
    toggleRadar()
  );
  if(%1 == false AND radarIsShow == true,
    toggleRadar()
  );
</action>


<action name="krpToggleUI">
  if(%1 == true
    show_UI(1);
    ,
    hide_UI(null, 1);
  );
</action>

<action name="krpToggleVR">
  js_request_gyro_promission();
  if(%1 == true,
    turn_on_vr();
    pause_embed_video();
    ,
    turn_off_vr();
    resume_embed_video();
  );
</action>


<action name="krpChangeViewType">
  change_multi_view(%1);
</action>


<action name="krpToggleGyro">
  js_request_gyro_promission();
  if(%1 == true,
    start_gyro();
    ,
    stop_gyro();
  );
</action>


<action name="krpToggleHD">
  if(%1 == true,
    switch_to_multires();
    ,
    switch_to_mobile();
  );
</action>


<action name="krpToggleCopyright">
  set(contextmenu.item["copyright"].visible, %1);
</action>


<action name="krpToggleAgreement">
  
  set(contextmenu.item["ccagreement"].visible, true);
</action>


<action name="krpToggleAutoPlay">
  if(config.panos.pano[get(scene_name)].autoplay.enabled == 1,
    if(%1 == true,
      resume_autoplay();
      ,
      pause_autoplay();
    );
  );
</action>

<action name="krpResetAutoPlay">
  set(autorotate.enabled, %1);
  set(autorotate.accel,10);
  set(autorotate.waittime, 0);
  if(%2 !== null,
    set(temp_speed,360.0);
    div(temp_speed, %2);
    copy(autorotate.speed, temp_speed);
  );
</action>


<action name="krpLookTo">
  set(targetHLookAt, %1);
  set(targetVLookAt, %2);
  set(targetFov, %3);
  set(lookToType, %4);
  if(lookToType == 1,
    lookto(get(view.hlookat),get(view.vlookat),120,smooth(720,-720,720), true, true, 
      lookto(get(targetHLookAt),get(targetVLookAt),120,smooth(720,-720,720), true, true, 
        lookto(get(targetHLookAt),get(targetVLookAt), get(targetFov));
      );
    );
    ,
    lookto(get(targetHLookAt),get(targetVLookAt), get(targetFov));
  );
</action>

<action name="krpMutedEmbedVideo">
  muted_embed_video();
</action>

<action name="krpUnmutedEmbedVideo">
  unmuted_embed_video();
</action>

<action name="krpPauseEmbedVideo">
  pause_embed_video();
</action>

<action name="krpResumeEmbedVideo">
  resume_embed_video();
</action>

<action name="krpOverlayDidShowCallback">
 if(%1 == VIDEO_MODAL OR %1 == MIX_MODAL OR %1 == ARTICLE_MODAL,
    if(hotspot[get(embed_video_name)].ispaused == false,
      pause_embed_video();
    );
  );
</action>

<action name="krpOverlayDidHideCallback">
  if(%1 == VIDEO_MODAL OR %1 == MIX_MODAL OR %1 == ARTICLE_MODAL,
    if(hotspot[get(embed_video_name)].ispaused == true AND hotspot[get(embed_video_name)].need_resume == true,
      resume_embed_video();
    );
  );
  js_App('krpOverlayDidHide',true);
</action>

<action name="krpHotspotMusicStopedCallback">
  unmuted_embed_video();
</action>

<action name="krpChangeMouseControl">
  if(%1 == 'moveto',
    set(control.mouse, 'moveto');
    set(contextmenu.item['controldrag'].visible,false);
    set(contextmenu.item['controlmoveto'].visible,true);
  );
  if(%1 == 'drag',
    set(control.mouse, 'drag');
    set(contextmenu.item['controldrag'].visible,true);
    set(contextmenu.item['controlmoveto'].visible,false);
  );
</action>

<action name="krpAddBottomMask">
  add_bottom_mask(%1, %2);
</action>

<action name="krpSetLanguage">
  if(%1 == 'en',
    set(contextmenu.item['fullscreen'].caption, 'Toggle Fullscreen');
    set(contextmenu.item['viewtype'].caption, 'View type');
    set(contextmenu.item['controlmoveto'].caption, 'Switch to MoveTo');
    set(contextmenu.item['controldrag'].caption, 'Switch to Drag');
    set(contextmenu.item['openReport'].caption, 'Report');

    set(layer[webvr_exitbutton].html, 'Exit VR');
    set(layer[webvr_setupbutton].html, 'VR Setup');
    set(mobilevr_presets.headset["nodt"].caption,'No Distortion');
    set(webvr_text_noDistortion, 'No Distortion');
		set(webvr_text_webvrSetup, 'WebVR Setup');
		set(webvr_text_mobilevrSetup, 'MobileVR Setup');
		set(webvr_text_screensize, 'Screensize (inch):');
		set(webvr_text_vrheadset, 'VR Headset Preset:');
		set(webvr_text_customizeHeadset, 'Customize Headset');
		set(webvr_text_adjustmentInVR, 'Interactive Adjustment in VR');
		set(webvr_text_close, 'CLOSE');
		set(webvr_text_preset, 'Preset:');
		set(webvr_text_fov, 'Lens-Field-of-View:');
		set(webvr_text_interLensDistance, 'Inter-Lens-Distance(mm):');
		set(webvr_text_screenToLensDistance, 'Screen-toLens-Distance(mm):');
		set(webvr_text_trayToLensCenterDistance, 'Tray-to-Lens-Center-Distance(mm):');
		set(webvr_text_lensDistortion, 'Lens-Distortion Coefficients:');
		set(webvr_text_oversampling, 'Oversampling:');
    

  );

  if(%1 == 'cn',
    set(contextmenu.item['fullscreen'].caption, '全屏切换');
    set(contextmenu.item['viewtype'].caption, '视角切换');
    set(contextmenu.item['controlmoveto'].caption, '切换拖拽方式为正向');
    set(contextmenu.item['controldrag'].caption, '切换拖拽方式为反向');
    set(contextmenu.item['openReport'].caption, '举报');

    set(layer[webvr_exitbutton].html, '退出 VR');
    set(layer[webvr_setupbutton].html, 'VR 设置');
    set(mobilevr_presets.headset["nodt"].caption,'无畸变');
    set(webvr_text_noDistortion, '无畸变');
		set(webvr_text_webvrSetup, 'WebVR 设置');
		set(webvr_text_mobilevrSetup, 'MobileVR 设置');
		set(webvr_text_screensize, '屏幕尺寸（英寸）:');
		set(webvr_text_vrheadset, 'VR 头显预设');
		set(webvr_text_customizeHeadset, '自定义头显');
		set(webvr_text_adjustmentInVR, '在 VR 中进行调整');
		set(webvr_text_close, '关闭');
		set(webvr_text_preset, '预设：');
		set(webvr_text_fov, 'FOV');
		set(webvr_text_interLensDistance, '内镜距离（mm）:');
		set(webvr_text_screenToLensDistance, '屏幕到镜头距离（mm）:');
		set(webvr_text_trayToLensCenterDistance, '头显到镜头中央的距离（mm）:');
		set(webvr_text_lensDistortion, '镜头畸变系数：');
		set(webvr_text_oversampling, '过采样：');
  );
</action>

<action name="krpEnterMarkMode">
  set(useMarkMode, true);
</action>

<action name="krpExitMarkMode">
  set(useMarkMode, false);
</action>


<action name="krpAddSelfMark">
  krpAddMark(%1,%2,get(daikanAvatar),get(daikanNickname));
</action>

<action name="krpAddMark">
  set(flag_name, '_flagImage');
  txtadd(flag_name, get(timertick));
  addhotspot(get(flag_name));
  set(hotspot[get(flag_name)].alpha, 1);
  set(hotspot[get(flag_name)].ath,%1);  
  set(hotspot[get(flag_name)].atv,%2);
  set(hotspot[get(flag_name)].edge,center);
  set(hotspot[get(flag_name)].width,40);
  set(hotspot[get(flag_name)].height,40);
  set(hotspot[get(flag_name)].roundedge,20);

  set(avatarURL, %3);
  if(avatarURL === null || avatarURL == '',
    delete(avatarURL);
  );
  set(avatarNickname, %4);
  if(avatarNickname === null || avatarNickname == '',
    delete(avatarNickname);
  );
  
  if(avatarURL === null AND avatarNickname !== null,
    set(hotspot[get(flag_name)].url,get(plugin_url.TEXT_SWF)); 
    copy(hotspot[get(flag_name)].html, avatarNickname);
    set(hotspot[get(flag_name)].backgroundcolor,0x000000);
    set(hotspot[get(flag_name)].backgroundalpha,0.6);
    set(hotspot[get(flag_name)].css, 'text-align:center; line-height: 36px; font-size:12px; color:#FFFFFF;');
  );
  
  if(avatarURL !== null, 
    copy(hotspot[get(flag_name)].url,avatarURL);
  );

  
  set(hotspot[get(flag_name)].onloaded, 
    delayedcall(0.5, 
      tween(hotspot[get(name)].alpha, 0, 0.5, easeOutQuad, 
        removehotspot(get(name));
      );
    );
  );
</action>

<action name="krpRemoveMark">
  set(flag_name, '_flagImage');
  removehotspot(get(flag_name));
</action>

<action name="krpAddContextMenu">
  set(menuURL, %2);
  if(add_content_menu_count === null,
    set(add_content_menu_count,1);
    set(contextmenu.item[custom1].visible, true);
    set(contextmenu.item[custom1].caption, %1);
    if(menuURL != "" AND menuURL !== null,
      set(contextmenu.item[custom1].url, get(menuURL));
      set(contextmenu.item[custom1].enabled, true);
      ,
      set(contextmenu.item[custom1].enabled, true);
      set(contextmenu.item[custom1].onclick, );
    );
    ,
    if(add_content_menu_count == 1,
      inc(add_content_menu_count);
      set(contextmenu.item[custom2].visible, true);
      set(contextmenu.item[custom2].caption, %1);
      if(menuURL != "" AND menuURL !== null,
        set(contextmenu.item[custom2].url, get(menuURL));
        set(contextmenu.item[custom2].enabled, true);
        ,
        set(contextmenu.item[custom2].enabled, true);
        set(contextmenu.item[custom2].onclick, );
      );
      ,
      if(add_content_menu_count == 2,
        inc(add_content_menu_count);
        set(contextmenu.item[custom3].visible, true);
        set(contextmenu.item[custom3].caption, %1);
        if(menuURL != "" AND menuURL !== null,
          set(contextmenu.item[custom3].url, get(menuURL));
          set(contextmenu.item[custom3].enabled, true);
          ,
          set(contextmenu.item[custom3].enabled, true);
          set(contextmenu.item[custom3].onclick, );
        );
      );
    );
  );
</action>




<action name="startup" autorun="onstart">
  setup_startup_vars();
  js_playerReadyCallback();
</action>

<action name="setup_startup_vars">

  
  if(device.mobile,
    set(customScale, 1);
    if(stagewidth LT stageheight,
      div(customScale, stagewidth,540);
      ,
      div(customScale, stageheight,360);
    );
    if(customScale LT 0.5,
      set(customScale,0.7);
    );
    if(customScale GT 0.8,
      set(customScale, 0.75);
    );
    copy(stagescale,customScale);
  );
  set(display.autofullscreen, false);
  
  if((sceneType == 1 OR sceneType == 3) AND (config.panos.pano[get(scene_name)].radar.enabled == 1 OR config.panos.pano[get(scene_name)].radar.enable == 1),
      set(radarEnabled, true);
  );


  set(view_type,0);

  if(sceneType == 2,
    
    set(enableLittleplanet, 0);
    hide_UI(0,1);
  );
  if(sceneType == 3,
    
  );
  if(sceneType == 4,
    hide_UI(0,1);
  );
  setup_hotspot();
  set(events.onpreviewcomplete,on_preview_complete());
  set(events.onloadcomplete,on_load_complete());

</action>

<action name="setup_start_pano">


  

  
  set(view.fovtype, MFOV);
  if(enableLittleplanet != 0,
    setup_littleplanet_view();
  );

</action>
<action name="on_load_complete">
  if(preview_load_inited != true,
    on_preview_complete(true);
  );
</action>
<action name="on_preview_complete">
  if(xml.scene !== null,
    js_toggleLoading(false);
    set(preview_load_inited, true);
    if(enableLittleplanet != 0 AND %1 === null,
      setup_weather();
      setup_littleplanet();
      delayedcall(0.2,
        setup_bottom_mask();
      );
      ,
      if(xml.scene === null,
        delayedcall(0.2,
          setup_pano_settings();
          if(settings.first_pano_inited == false,
            setup_global_settings();
          );
          js_sceneReadyCallback();
          setup_autoplay();
        );
        ,
        setup_pano_settings();
        if(settings.first_pano_inited == false,
          setup_global_settings();
        );
        js_sceneReadyCallback();
        setup_autoplay();
      );
    );

    if(isAutoTouring AND isAutoTourPause == false,
      pause_autoplay();
      delayedcall(0.5,autoTourPlay(););
    );

    if(webvr.isenabled,
      hide_UI();
    );
  );

</action>

<action name="setup_pano_settings">

  setup_top_mask();
  setup_contextmenu();
  setup_view();
  if(is_clean != 1,
    
    
    
    setup_embed();
    

    if(enableLittleplanet == 0,
      setup_bottom_mask();
      setup_weather();
    );

    if(isAutoTouring == true,
      hide_UI();
    );
    ,
    if(enableLittleplanet == 0,
      setup_bottom_mask();
      setup_weather();
    );
  );

</action>


<action name="setup_global_settings">

  delayedcall(0.5,



    
      
      
      setup_gyro();
      
      
      
      
      
      
      setup_vr();
      setup_autotour();
      
      
      
      
    
    set(settings.first_pano_inited, true);
    set(enableLittleplanet, 0);
  );




</action>



<action name="change_multi_view">
  set(view_type,%1);
  if(view_type_changing != true,
    set(view_type_changing,true);
    if(%1 == 4,
      skin_view_flat();
    );
    if(%1 == 3,
      skin_view_ball();
      ,
      if(%1 == 2,
        skin_view_fisheye();
        ,
        if(%1 == 1,
          cm_littleplanet_view();
          ,
          cm_normal_view();
        );
      );
    );
    delete(multi_view_type);
    ,
    set(multi_view_type,%1);
  );
</action>
<action name="cancel_view_limit">
  set(view.limitview, off);
  set(view.fovmin, 1);
  set(view.fovmax, 179);
</action>
<action name="recover_view_limit">
  if(config.panos.pano[get(scene_name)].view.vlookatmin != -90 OR config.panos.pano[get(scene_name)].view.vlookatmax != 90,
    set(view.limitview, lookat);
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );

  if((config.panos.pano[get(scene_name)].view.hlookatmin != -180 AND config.panos.pano[get(scene_name)].view.hlookatmin !== null) OR (config.panos.pano[get(scene_name)].view.hlookatmax != 180 AND config.panos.pano[get(scene_name)].view.hlookatmax !== null),
    set(view.limitview, lookat);
    copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
    copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
  );

  if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
    set(config.panos.pano[get(scene_name)].view.fovmin,70);
  );
  copy(view.fovmin, config.panos.pano[get(scene_name)].view.fovmin);

  if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
    set(config.panos.pano[get(scene_name)].view.fovmax,120);
  );
  copy(view.fovmax, config.panos.pano[get(scene_name)].view.fovmax);
  if(config.panos.pano[get(scene_name)].view.vlookatmin !== null AND config.panos.pano[get(scene_name)].view.vlookatmin != "",
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
  );
  if(config.panos.pano[get(scene_name)].view.vlookatmax !== null AND config.panos.pano[get(scene_name)].view.vlookatmax != "",
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );
  if(config.panos.pano[get(scene_name)].view.hlookatmin !== null AND config.panos.pano[get(scene_name)].view.hlookatmin != "",
    copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
  );
  if(config.panos.pano[get(scene_name)].view.hlookatmax !== null AND config.panos.pano[get(scene_name)].view.hlookatmax != "",
    copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
  );

  copy(view.limitview, viewLimitState);
</action>
<action name="setup_view">
  if(forceFov !== null,
    copy(view.hlookat, config.panos.pano[get(scene_name)].view.hlookat);
    copy(view.vlookat, config.panos.pano[get(scene_name)].view.vlookat);
    copy(view.fov, forceFov);
    copy(view.fovmin, forceFovmin);
    copy(view.fovmax, forceFovmax);
    ,
    if((view_type == 0 OR view_type === null) AND webvr.isenabled != true AND isAutoTouring != true,
      
      copy(view.hlookat, config.panos.pano[get(scene_name)].view.hlookat);
      copy(view.vlookat, config.panos.pano[get(scene_name)].view.vlookat);
      if(config.panos.pano[get(scene_name)].view.vlookatmin != -90 OR config.panos.pano[get(scene_name)].view.vlookatmax != 90,
        set(view.limitview, lookat);
        copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
        copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
      );

      if((config.panos.pano[get(scene_name)].view.hlookatmin != -180 AND config.panos.pano[get(scene_name)].view.hlookatmin !== null) OR (config.panos.pano[get(scene_name)].view.hlookatmax != 180 AND config.panos.pano[get(scene_name)].view.hlookatmax !== null),
        set(view.limitview, lookat);
        copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
        copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
      );


      if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
        set(config.panos.pano[get(scene_name)].view.fovmin,70);
      );
      copy(view.fovmin, config.panos.pano[get(scene_name)].view.fovmin);

      if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
        set(config.panos.pano[get(scene_name)].view.fovmax,120);
      );
      copy(view.fovmax, config.panos.pano[get(scene_name)].view.fovmax);

      if(config.panos.pano[get(scene_name)].view.fov != 0 AND config.panos.pano[get(scene_name)].view.fov != "" AND config.panos.pano[get(scene_name)].view.fov !== null,
        copy(view.fov, config.panos.pano[get(scene_name)].view.fov);
        ,
        set(view.fov, 95);
      );

      if(config.panos.pano[get(scene_name)].view.vlookatmin !== null AND config.panos.pano[get(scene_name)].view.vlookatmin != "",
        copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
      );

      if(config.panos.pano[get(scene_name)].view.vlookatmax !== null AND config.panos.pano[get(scene_name)].view.vlookatmax != "",
        copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
      );

      if(config.panos.pano[get(scene_name)].view.hlookatmin !== null AND config.panos.pano[get(scene_name)].view.hlookatmin != "",
        copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
      );

      if(config.panos.pano[get(scene_name)].view.hlookatmax !== null AND config.panos.pano[get(scene_name)].view.hlookatmax != "",
        copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
      );

      if(needKeepview == true,
        copy(view.hlookat, needKeepviewHlookat);
        copy(view.vlookat, needKeepviewVlookat);
        copy(view.fov, needKeepviewFov);
      );
    );
  );
</action>

<action name="setup_view_limit">
  if(config.panos.pano[get(scene_name)].view.vlookatmin != -90 OR config.panos.pano[get(scene_name)].view.vlookatmax != 90,
    set(view.limitview, lookat);
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );

  if((config.panos.pano[get(scene_name)].view.hlookatmin != -180 AND config.panos.pano[get(scene_name)].view.hlookatmin !== null) OR (config.panos.pano[get(scene_name)].view.hlookatmax != 180 AND config.panos.pano[get(scene_name)].view.hlookatmax !== null),
    set(view.limitview, lookat);
    copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
    copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
  );

  if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
    set(config.panos.pano[get(scene_name)].view.fovmin,70);
  );
  copy(view.fovmin, config.panos.pano[get(scene_name)].view.fovmin);

  if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
    set(config.panos.pano[get(scene_name)].view.fovmax,120);
  );
  copy(view.fovmax, config.panos.pano[get(scene_name)].view.fovmax);

  if(config.panos.pano[get(scene_name)].view.vlookatmin !== null AND config.panos.pano[get(scene_name)].view.vlookatmin != "",
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
  );

  if(config.panos.pano[get(scene_name)].view.vlookatmax !== null AND config.panos.pano[get(scene_name)].view.vlookatmax != "",
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );

  if(config.panos.pano[get(scene_name)].view.hlookatmin !== null AND config.panos.pano[get(scene_name)].view.hlookatmin != "",
    copy(view.hlookatmin, config.panos.pano[get(scene_name)].view.hlookatmin);
  );
  
  if(config.panos.pano[get(scene_name)].view.hlookatmax !== null AND config.panos.pano[get(scene_name)].view.hlookatmax != "",
    copy(view.hlookatmax, config.panos.pano[get(scene_name)].view.hlookatmax);
  );

</action>

<action name="skin_view_look_straight">
  
    set(view.fovmax, get(config.panos.pano[get(scene_name)].view.fovmax));
    set(view.fovmin, get(config.panos.pano[get(scene_name)].view.fovmin));
    set(view.limitview,auto);
  
</action>

<action name="cm_normal_view">
  tween(view.architectural, 0.0, 0.5);
  tween(view.pannini,       0.0, 0.5);
  tween(view.fisheye,       0.0, 0.5);
  tween(view.fov,     get(config.panos.pano[get(scene_name)].view.fov), 0.5);
  tween(view.vlookat, get(config.panos.pano[get(scene_name)].view.vlookat), 0.5,easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
      ,
      setup_view_limit();
    );
  );
</action>

<action name="skin_view_fisheye">

	tween(view.architectural, 0.0,  distance(1.0,0.5));
	tween(view.pannini,       0.0,  distance(1.0,0.5));
	tween(view.fisheye,       1.0,  distance(1.0,0.5));
  tween(view.vlookat, get(config.panos.pano[get(scene_name)].view.vlookat), 0.5);
  tween(view.fov,       115,  0.5);
	tween(view.distortion,    1.0, distance(1.0,0.5),easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
</action>

<action name="skin_view_ball">

	tween(view.architectural, 0.0,  distance(1.0,0.5));
	tween(view.pannini,       0.0,  distance(1.0,0.5));
  
	tween(view.distortion,    2.8, distance(1.0,0.5),easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
</action>

<action name="skin_view_architectural">
	skin_view_look_straight();
	tween(view.architectural, 1.0, distance(1.0,0.5));
	tween(view.pannini,       0.0, distance(1.0,0.5));
	tween(view.distortion,    0.0, distance(1.0,0.5));
</action>

<action name="skin_view_stereographic">
	skin_view_look_straight();
	tween(view.architectural, 0.0, distance(1.0,0.5));
	tween(view.pannini,       0.0, distance(1.0,0.5));
	tween(view.distortion,    1.0, distance(1.0,0.8));
</action>

<action name="skin_view_pannini">
	skin_view_look_straight();
	tween(view.architectural, 0.0, distance(1.0,0.5));
	tween(view.pannini,       1.0, distance(1.0,0.8));
	if(view.distortion LT 0.1,
		tween(view.distortion, 1.0, distance(1.0,0.8));
	  );
</action>

<action name="cm_littleplanet_view">
  tween(view.architectural, 0.0, 0.25);
  tween(view.vlookat,  90, distance(179, 1.50), easeoutquad);
  set(backtonormalfirst,false);
  if(view.pannini       == true,  set(backtonormalfirst,true) );
  if(view.stereographic == false, set(backtonormalfirst,true) );
  if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
  set(view.pannini, false);
  set(view.stereographic, true);
  set(view.fovmax, 150);
  tween(view.fov, 150, distance(179, 0.75),easeoutquad);
  tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad,
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
</action>

<action name="skin_view_flat">
		set(plugin[skin_gyro].enabled, false);
		skin_update_view_menu(1);
		if(videointerface_isflat !== true,
			set(videointerface_isflat, true);
			stoptween(view.fov);
			mod(view.hlookat, 360);
			set(view.limitview, off);
			set(view.maxpixelzoom, 0);
			copy(videointerface_backup_fovmin, view.fovmin);
			set(view.fovmin, 0.01);
			set(control.usercontrol, off);
			copy(videointerface_backup_mouse, control.mouse);
			set(control.mouse, drag);

			copy(current_fov, view.fov);
			copy(videointerface_backup_fovtype, view.fovtype);
			remapfovtype(current_fov, get(view.fovtype), HFOV);
			set(view.fovtype, HFOV);
			copy(view.fov, current_fov);
			copy(startfov, current_fov);

			copy(image_hfov, image.hfov);
			tween(image_hfov, 1.0, 3.0, linear,
				set(control.usercontrol,all);
				set(view.fovmin, 0.25);
				set(view.hlookatmin, -2);
				set(view.hlookatmax, +2);
				set(view.vlookatmin, -1);
				set(view.vlookatmax, +1);
				set(view.limitview, range);
			  ,
				if(image_hfov LT 90,
					mul(view.fov, image_hfov, 1.1);
				  ,
					sub(hr, image_hfov, 90);
					div(hr, 270);
					sub(hr2, 1, hr);
					mul(a, startfov, hr);
					mul(b, 99, hr2);
					add(view.fov, a,b);
				  );
				copy(image.hfov, image_hfov);
				set(image.vfov, 0);
				updateobject(true, true);
         if(multi_view_type !== null,
            delayedcall(0.1,change_multi_view(multi_view_type));
          );
			  );

			adjusthlookat(0);
			tween(view.hlookat, 0, 1.5);
			tween(view.vlookat, 0, 1.5);
		 );
	</action>
<action name="setup_autoplay">
  if(config.panos.pano[get(scene_name)].autoplay.enabled == 1 OR forceAutoplay == 1,
    
      set(autorotate.waittime, 6);
      set(autorotate.accel, 0);
      if(config.panos.pano[get(scene_name)].autoplay.duration !== null,
        set(temp_speed,360.0);
        div(temp_speed,config.panos.pano[get(scene_name)].autoplay.duration);
        copy(autorotate.speed, temp_speed);
        ,
        set(autorotate.speed, 2);
      );
      set(autorotate.accel,10);
      set(autorotate.enabled, true);
      if(config.panos.pano[get(scene_name)].view.autorotatekeepview == 1,
        set(autorotate.horizon, 'off');
        ,
        set(autorotate.horizon, 0.0);
      );
      if(config.panos.pano[get(scene_name)].autoplay.keep_originview == 1,
        copy(autorotate.horizon, config.panos.pano[get(scene_name)].view.vlookat);
        ,
        set(autorotate.horizon, 0.0);
      );

      if(autoplayWaitPause,
        delayedcall(0.5,
          pause_autoplay();
          set(autoplayWaitPause,false);
        );
      );
    
  );
</action>
<action name="resume_autoplay">
  set(autoplayWaitPause,false);
  
    if(isAutoTouring != true AND config.panos.pano[get(scene_name)].autoplay.enabled == 1 OR forceAutoplay == 1,
      set(autorotate.enabled, true);
      autorotate.interrupt();
    );
  
</action>
<action name="pause_autoplay">
  set(autoplayWaitPause,true);
  set(autorotate.enabled, false);
</action>

<action name="load_pano_loop">
  if(is_looping != true AND config.panos.pano[get(scene_name)].autoplay.enter_next != 0 AND isAutoTouring != true,
    set(loop_flag,false);
    for(set(o,0), o LT scene.count, inc(o),
        if(loop_flag == true,
          copy(next_pano_id,scene[get(o)].scene_id);
          delete(loop_flag);
        );
        if(loop_flag == false AND scene[get(xml.scene)].name == config.panos.pano[get(o)].name,
          set(loop_flag,true);
        );
    );

    if(next_pano_id === null,
      copy(next_pano_id,scene[0].scene_id);
    );
    set(is_looping,true);
    js_sceneChangeCallback(get(next_pano_id));
    delayedcall(1,
      set(is_looping,false);
      delete(next_pano_id);
    );
  );
</action>
<action name="setup_autotour">
     if(config.autoTours.tour.point.count GT 0 ,
      set(autoTourPointIndex,0);
      js_toggleAutoTourUI(true);
      addplugin(soundinterface);
      if(device.html5 == true ,
        copy(plugin[soundinterface].url,plugin_url.SOUND_JS);
        if(device.ios,
          if(plugin[soundinterface].loaded,
            set(autoTourSoundName,'auto_tour_sound_id');
            playsound(get(autoTourSoundName),get(settings.blank_music_url),1);
            ,
            set(plugin[soundinterface].onloaded,
              set(autoTourSoundName,'auto_tour_sound_id');
              playsound(get(autoTourSoundName),get(settings.blank_music_url),1);
            );
          );
        );
        ,
        copy(plugin[soundinterface].url,plugin_url.SOUND_SWF);
      );
      set(plugin[soundinterface].preload,true);
      if(config.autoTours.tour.startImage !== null AND config.autoTours.tour.startImage != "" ,
        set(autoTourShowButtonDelay,4);
        ,
        set(autoTourShowButtonDelay,0);
      );

      
    );

  </action>

  <action name="autoTourStart">

    hide_UI();
    cancel_view_limit();
    set(isAutoTourPause,false);
    set(isAutoTouring,true);

    

    

    set(autorotateEnabledForAutoTour,get(autorotate.enabled));
    set(usercontrolEnabledForAutoTour,get(control.usercontrol));

    if(config.autoTours.tour.startImage !== null AND config.autoTours.tour.startImage != "" ,
      addlayer(autoTourStartAlert);
      copy(autoTour_startImage,config.autoTours.tour.startImage);
      txtadd(autoTour_startImage,'?imageView2/0/w/2000/h/2000');
      set(layer[autoTourStartAlert].url,get(autoTour_startImage));
      set(layer[autoTourStartAlert].align,center);
      set(layer[autoTourStartAlert].scale,0.5);
      set(layer[autoTourStartAlert].background,false);
      set(layer[autoTourStartAlert].autoalpha,true);
      set(layer[autoTourStartAlert].enable,false);
      set(layer[autoTourStartAlert].y,0);
      set(layer[autoTourStartAlert].keep,true);

      set(layer[autoTourStartAlert].alpha,0.0);
      tween(layer[autoTourStartAlert].alpha,1.0,0.5);

      delayedcall(3,tween(layer[autoTourStartAlert].alpha,0.0,0.5););
      set(hasAutoTourStartAlert,true);
      ,
      set(hasAutoTourStartAlert,false);
    );


    pause_autoplay();
    set(control.usercontrol,off);

    if(%1 != true,
      js_toggleBgVoice(false);
      if(config.autoTours.tour.disableMusic == true,
        js_toggleBgMusic(false);
      );
    );


    if(config.autoTours.tour.hideHotspots == true,
      hide_hotspots();
      copy(auto_tour_comments_state,config.feature.show_comment);
      
      js_toggleComments(false);
    );

    if(pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetPano || scene[get(pano_id)].pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetPano,
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
      if(hasAutoTourStartAlert == true ,
        delayedcall(autoTourDelayedCallID, 4,autoTourPlay(););
        set(hasAutoTourStartAlert, null);
        ,
        delayedcall(autoTourDelayedCallID, 1,autoTourPlay(););
      );
      ,
      set(waitAutoTourContinue, true);
      stoptween(view.hlookat,view.vlookat,view.fov);
      if(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode !== null,
        copy(blend_mode,blendmodes[get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode)].blend);
      );
      if(config.autoTours.tour.point[get(autoTourPointIndex)].targetScene !== null AND config.autoTours.tour.point[get(autoTourPointIndex)].targetScene != "",
        set(targetScene, get(scene[get(config.autoTours.tour.point[get(autoTourPointIndex)].targetScene)].scene_id));
        js_sceneChangeCallback(get(targetScene), get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
        ,
        js_panoChangeCallback(get(config.autoTours.tour.point[get(autoTourPointIndex)].targetPano), get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
      );
      
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
    );
  </action>
  <action name="autoTourResume">
    set(isAutoTourPause,false);
    dec(autoTourPointIndex);

    set(control.usercontrol,off);
    cancel_view_limit();

    tween(layer[autoTourResumeBtnContainer].alpha,0.0,0.2,default,set(ayer[autoTourResumeBtnContainer].enable.false););
    set(layer[autoTourPauseBtnContainer].enable,false);
    tween(layer[autoTourPauseBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourPauseBtnContainer].enable.true););

    if(pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetScene ||  scene[get(pano_id)].pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetPano,
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
      delayedcall(autoTourDelayedCallID, 1,autoTourPlay(););
      ,
      stoptween(view.hlookat,view.vlookat,view.fov);
      if(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode !== null,
        copy(blend_mode,blendmodes[get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode)].blend);
      );
      if (config.autoTours.tour.point[get(autoTourPointIndex)].targetScene !== null AND config.autoTours.tour.point[get(autoTourPointIndex)].targetScene != "",
        set(targetScene, get(scene[get(config.autoTours.tour.point[get(autoTourPointIndex)].targetScene)].scene_id));
        js_sceneChangeCallback(get(targetScene),get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
        ,
        js_panoChangeCallback(get(config.autoTours.tour.point[get(autoTourPointIndex)].targetPano), get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
      );
      
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
    );

  </action>
  <action name="autoTourPlay">
    if(waitAutoTourContinue == true,
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
      set(waitAutoTourContinue, null);
      if(hasAutoTourStartAlert == true ,
        delayedcall(autoTourDelayedCallID, 4,autoTourPlay(););
        set(hasAutoTourStartAlert, null);
        ,
        delayedcall(autoTourDelayedCallID, 1,autoTourPlay(););
      );
      ,
      copy(preAutoTourSoundName,autoTourSoundName);
      set(layer[autoTourPauseBtnContainer].enable,false);
      tween(layer[autoTourPauseBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourPauseBtnContainer].enable.true););
      set(layer[autoTourStopBtnContainer].enable,false);
      tween(layer[autoTourStopBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourStopBtnContainer].enable.true););
      set(autoTourSoundName,'auto_tour_sound_id');
      

      set(tempAutoTourIndex,get(config.autoTours.tour.point.count));
      dec(tempAutoTourIndex);


      copy(preAutoTourPointIndex,autoTourPointIndex);
      sub(preAutoTourPointIndex,1);
      if(config.autoTours.tour.point[get(autoTourPointIndex)].music != config.autoTours.tour.point[get(preAutoTourPointIndex)].music,
        stopsound(get(preAutoTourSoundName));
        
        ,
        copy(autoTourSoundName, preAutoTourSoundName);
      );
      if(autoTourPointIndex == tempAutoTourIndex,
        autoTourEnd();
        ,
        if(config.autoTours.tour.point[get(autoTourPointIndex)].playMode == 3,
          copy(tempAutoTourPointIndex,autoTourPointIndex);
          inc(tempAutoTourPointIndex);
          stoptween(view.hlookat,view.vlookat,view.fov);
          if(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode !== null,
            copy(blend_mode,blendmodes[get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode)].blend);
          );
          if (config.autoTours.tour.point[get(tempAutoTourPointIndex)].targetScene !== null AND config.autoTours.tour.point[get(tempAutoTourPointIndex)].targetScene != "",
            set(targetScene, get(scene[get(config.autoTours.tour.point[get(tempAutoTourPointIndex)].targetScene)].scene_id));
            js_sceneChangeCallback(get(targetScene),get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
            ,
            js_panoChangeCallback(get(config.autoTours.tour.point[get(tempAutoTourPointIndex)].targetPano), get(config.autoTours.tour.point[get(autoTourPointIndex)].blendMode));
          );
          
          set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endath));
          set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endatv));
          set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov));
          inc(autoTourPointIndex);
          ,
          showSubtitle();
          tween(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endath),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));
          tween(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endatv),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));
          if(config.autoTours.tour.point[get(autoTourPointIndex)].music !== null AND config.autoTours.tour.point[get(autoTourPointIndex)].music != '',
            if(config.autoTours.tour.point[get(autoTourPointIndex)].playMode == 0,
              
              set(plugin[soundinterface].volume, get(config.autoTours.tour.point[get(autoTourPointIndex)].volume));
              playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1,autoTourPlay(););
              set(autoTourSoundIsPause, false);
              tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));
              ,
              if(config.autoTours.tour.point[get(autoTourPointIndex)].music != config.autoTours.tour.point[get(preAutoTourPointIndex)].music,
              
                set(plugin[soundinterface].volume, get(config.autoTours.tour.point[get(autoTourPointIndex)].volume));
                playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1);
                
                ,
                copy(autoTourSoundName,preAutoTourSoundName);
                if(autoTourSoundIsPause == true,
                  
                  set(plugin[soundinterface].volume, get(config.autoTours.tour.point[get(autoTourPointIndex)].volume));
                  playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1);
                  set(autoTourSoundIsPause, false);
                );
              );
              tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime),null,autoTourPlay(););
            );
            ,
            stopsound(get(autoTourSoundName));
            
            set(sound[get(autoTourSoundName)].oncomplete,null);
            tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime),null,autoTourPlay(););
          );
          inc(autoTourPointIndex);
        );
      );
    );

  </action>
  <action name="autoTourPause">

    set(isAutoTourPause,true);
    stopdelayedcall('delayedStopAutoTour');
    if(autoTourPointIndex == 0,
      set(autoTourPointIndex, 1);
      stopdelayedcall(autoTourDelayedCallID);
    );
    set(layer[autoTourResumeBtnContainer].enable,false);
    

    pausesound(get(autoTourSoundName));
    
    stoptween(view.hlookat);
    stoptween(view.vlookat);
    stoptween(view.fov);

    set(autoTourSoundIsPause,true);

    set(control.usercontrol,all);
    recover_view_limit();

  </action>
  <action name="autoTourEnd">
    if(config.autoTours.tour.stopImage !== null AND config.autoTours.tour.stopImage != "" ,
      addlayer(autoTourStopAlert);
      copy(autoTour_stopImage,config.autoTours.tour.stopImage);
      txtadd(autoTour_stopImage,'?imageView2/0/w/2000/h/2000');
      set(layer[autoTourStopAlert].url,get(autoTour_stopImage));
      set(layer[autoTourStopAlert].align,center);
      set(layer[autoTourStopAlert].scale,0.5);
      set(layer[autoTourStopAlert].background,false);
      set(layer[autoTourStopAlert].autoalpha,true);
      set(layer[autoTourStopAlert].enable,false);
      set(layer[autoTourStopAlert].y,0);
      set(layer[autoTourStopAlert].keep,true);

      set(layer[autoTourStopAlert].alpha,0.0);
      tween(layer[autoTourStopAlert].alpha,1.0,0.5);

      delayedcall(3,tween(layer[autoTourStopAlert].alpha,0.0,0.5););
      delayedcall('delayedStopAutoTour',3,autoTourEndAction(););
      hideSubtitle();
      ,
      autoTourEndAction();
    );

  </action>
  <action name="autoTourEndAction">
    set(isAutoTourPause,false);
    set(autoTourPointIndex,0);

    stopsound(get(autoTourSoundName));
    
    stoptween(view.hlookat);
    stoptween(view.vlookat);
    stoptween(view.fov);

    

    set(layer[autoTourPauseBtnContainer].enable,false);
    tween(layer[autoTourPauseBtnContainer].alpha,0.0,0.2);
    set(layer[autoTourResumeBtnContainer].enable,false);
    tween(layer[autoTourResumeBtnContainer].alpha,0.0,0.2);
    set(layer[autoTourStopBtnContainer].enable,false);
    tween(layer[autoTourStopBtnContainer].alpha,0.0,0.2);

    set(isAutoTouring,false);
    set(waitAutoTourContinue, null);

    if(config.autoTours.tour.loop == true AND %1 != true,
      autoTourStart(true);
      ,
      stopdelayedcall('delayedStopAutoTour');
      set(control.usercontrol,all);
      if(autorotateEnabledForAutoTour == true,
        resume_autoplay();
      );
      if(config.autoTours.tour.disableMusic == true,
        js_toggleBgMusic(true);
        
      );
      
        js_toggleBgVoice(true);
        

      show_UI();
      recover_view_limit();
      stopdelayedcall(autoTourDelayedCallID);
      tween(layer[autoTourStartAlert].alpha,0.0,0.01);

      if(config.autoTours.tour.hideHotspots == true,
        show_hotspots();
        if(auto_tour_comments_state == 1,
          
          js_toggleComments(true);
        );
      );
      hideSubtitle();
      js_autoTourEndCallback();
      js_toggleAutoTourUI(true);
    );
  </action>
  <action name="showSubtitle">
    if(config.autoTours.tour.point[get(autoTourPointIndex)].subtitle !== null AND config.autoTours.tour.point[get(autoTourPointIndex)].subtitle != '',
      copy(subtitle_txt,config.autoTours.tour.point[get(autoTourPointIndex)].subtitle);
      copy(subtitle_position,config.autoTours.tour.subtitlePosition);
      copy(subtitle_size,config.autoTours.tour.subtitleSize);
      copy(subtitle_background,config.autoTours.tour.subtitleBackground);
      escape(subtitle_txt);
      js_showAutoTourSubtitle(get(subtitle_txt), get(subtitle_position), get(subtitle_size), get(subtitle_background));
      
      ,
      hideSubtitle();
    );
  </action>
  <action name="hideSubtitle">
    js_hideAutoTourSubtitle();
  </action>
<action name="showComments">
  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].isComment,
      set(hotspot[get(i)].visible,true);
    );
  );

  for(set(i,0),i LT layer.count,inc(i),
    if(layer[get(i)].isComment,
      set(layer[get(i)].visible,true);
    );
  );

  set(commentVisibled,true);

  if(config.feature.enable_comment  == 0,
    set(modify_comment_cmd,get(js_modify_comment));
    txtadd(modify_comment_cmd,"('");
    txtadd(modify_comment_cmd,get(config.info.id));
    txtadd(modify_comment_cmd,"','");
    txtadd(modify_comment_cmd,get(pano_id));
    txtadd(modify_comment_cmd,"')");
    jscall(get(modify_comment_cmd));
    set(config.feature.enable_comment ,1);
    set(config.feature.show_comment,1);
    jscall(get(js_show_comments));
  );


  set(layer[comment_btn].crop,0|734|80|81);

  set(config.feature.show_comment,1);

</action>
<action name="hideComments">

  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].isComment,
      set(hotspot[get(i)].visible,false);
    );
  );
  for(set(i,0),i LT layer.count,inc(i),
    if(layer[get(i)].isComment,
      set(layer[get(i)].visible,false);
    );
  );

  set(layer[comment_btn].crop,0|814|80|80);

  jscall(get(js_hide_comments));

  set(config.feature.show_comment,0);

</action>
<action name="addComment">
  
  set(avatarUrl,%3);
  if( avatarUrl !== null,
    if(plugin[commentsContainer] === null,
      addplugin(commentsContainer);
      set(plugin[commentsContainer].zorder,50);
      set(plugin[commentsContainer].keep,true);
    );

    set(newCommentContainer,'new_comment_container');
    txtadd(newCommentContainer,%1);
    addhotspot(get(newCommentContainer));
    set(hotspot[get(newCommentContainer)].isComment,true);
    set(hotspot[get(newCommentContainer)].keep,true);
    set(hotspot[get(newCommentContainer)].isActiveHotspot,true);
    set(hotspot[get(newCommentContainer)].ath,%4);
    set(hotspot[get(newCommentContainer)].atv,%5);
    set(hotspot[get(newCommentContainer)].width,32);
    set(hotspot[get(newCommentContainer)].height,48);
    if(device.desktop,
      set(hotspot[get(newCommentContainer)].scale,1);
      ,
      set(hotspot[get(newCommentContainer)].scale,1.5);
    );
    hotspot[get(newCommentContainer)].loadstyle(skin_style);
    set(hotspot[get(newCommentContainer)].crop,200|203|64|96);
    set(hotspot[get(newCommentContainer)].edge,bottom);
    set(hotspot[get(newCommentContainer)].enabled,false);
    set(hotspot[get(newCommentContainer)].zorder,get(hotspot.count));
    set(hotspot[get(newCommentContainer)].handcursor,false);
    set(hotspot[get(newCommentContainer)].visible,get(commentVisibled));
    set(hotspot[get(newCommentContainer)].parent,commentsContainer);


    set(newCommentHeadMask,'new_comment_mask');
    txtadd(newCommentHeadMask,%1);
    addlayer(get(newCommentHeadMask));
    set(layer[get(newCommentHeadMask)].isComment,true);
    set(layer[get(newCommentHeadMask)].visible,get(commentVisibled));
    set(layer[get(newCommentHeadMask)].type,container);
    if(device.desktop,
      set(layer[get(newCommentHeadMask)].scale,1);
      ,
      set(layer[get(newCommentHeadMask)].scale,1.5);
    );
    set(layer[get(newCommentHeadMask)].keep,true);
    set(layer[get(newCommentHeadMask)].x,1);
    set(layer[get(newCommentHeadMask)].width,30);
    set(layer[get(newCommentHeadMask)].height,30);
    set(layer[get(newCommentHeadMask)].bgcolor,0xffffff);
    set(layer[get(newCommentHeadMask)].bgalpha,1);
    set(layer[get(newCommentHeadMask)].maskchildren,true);
    set(addCommentHotspotName,'hotspot[');
    txtadd(addCommentHotspotName,get(newCommentContainer));
    txtadd(addCommentHotspotName,']');
    set(layer[get(newCommentHeadMask)].parent,get(addCommentHotspotName));
    set(layer[get(newCommentHeadMask)].handcursor,false);
    set(layer[get(newCommentHeadMask)].enabled,false);
    set(layer[get(newCommentHeadMask)].zorder,get(layer.count));
    set(layer[get(newCommentHeadMask)].bgroundedge,5);
    set(layer[get(newCommentHeadMask)].capture,false);
    set(layer[get(newCommentHeadMask)].isActiveHotspot,true);


    set(newCommentHead,'new_comment_avatar');
    txtadd(newCommentHead,%1);
    addlayer(get(newCommentHead));
    set(layer[get(newCommentHead)].isComment,true);
    set(layer[get(newCommentHead)].isActiveHotspot,true);
    set(layer[get(newCommentHead)].visible,get(commentVisibled));
    set(layer[get(newCommentHead)].keep,true);
    if(device.desktop,
      set(layer[get(newCommentHead)].scale,1);
      ,
      set(layer[get(newCommentHead)].scale,1.5);
    );
    set(layer[get(newCommentHead)].width,30);
    set(layer[get(newCommentHead)].height,"prop");
    set(newCommentHeadUrl,%3);
    if(newCommentHeadUrl.length GT 0,
      txtadd(newCommentHeadUrl,?imageMogr2/thumbnail/60x60!);
      set(layer[get(newCommentHead)].url,get(newCommentHeadUrl));
    );
    set(addCommentMaskName,'layer[');
    txtadd(addCommentMaskName,get(newCommentHeadMask));
    txtadd(addCommentMaskName,']');
    set(layer[get(newCommentHead)].parent,get(addCommentMaskName));
    set(layer[get(newCommentHead)].handcursor,false);
    set(layer[get(newCommentHead)].enabled,false);
    set(layer[get(newCommentHead)].zorder,get(layer.count));
    set(layer[get(newCommentHead)].capture,false);
    set(layer[get(newCommentHead)].isActiveHotspot,true);



    set(newCommentPointTextName,'new_comment_point_text_container');
    txtadd(newCommentPointTextName,%1);
    addhotspot(get(newCommentPointTextName));
    set(hotspot[get(newCommentPointTextName)].keep,true);
    set(hotspot[get(newCommentPointTextName)].isActiveHotspot,true);
    set(hotspot[get(newCommentPointTextName)].isComment,true);
    set(hotspot[get(newCommentPointTextName)].ath,%4);
    set(hotspot[get(newCommentPointTextName)].atv,%5);
    set(hotspot[get(newCommentPointTextName)].visible,get(commentVisibled));
    set(hotspot[get(newCommentPointTextName)].type,container);
    set(hotspot[get(newCommentPointTextName)].url,get(plugin_url.TEXT_SWF));
    set(hotspot[get(newCommentPointTextName)].backgroundcolor,0x000000);
    set(hotspot[get(newCommentPointTextName)].backgroundalpha,0.6);
    if(device.flash,
      set(hotspot[get(newCommentPointTextName)].backgroundalpha,0.0);
    );
    set(hotspot[get(newCommentPointTextName)].enabled,false);
    set(hotspot[get(newCommentPointTextName)].handcursor,false);
    set(hotspot[get(newCommentPointTextName)].edge,topleft);
    set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
    if(device.desktop,
      set(hotspot[get(newCommentPointTextName)].css,font-family:STXihei; font-size:12px; color:#FFFFFF;letter-spacing:1px;);
      set(hotspot[get(newCommentPointTextName)].padding,8);
      set(hotspot[get(newCommentPointTextName)].oy,-48);
      set(hotspot[get(newCommentPointTextName)].ox,18);
      set(hotspot[get(newCommentPointTextName)].roundedge,5);
      set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
    ,
      set(hotspot[get(newCommentPointTextName)].css,font-family:STXihei; font-size:14px; color:#FFFFFF;letter-spacing:1px;);
      set(hotspot[get(newCommentPointTextName)].padding,10);
      set(hotspot[get(newCommentPointTextName)].oy,-74);
      set(hotspot[get(newCommentPointTextName)].ox,26);
      set(hotspot[get(newCommentPointTextName)].roundedge,5);
    );
    set(hotspot[get(newCommentPointTextName)].zorder,get(hotspot.count));

    set(hotspot[get(newCommentPointTextName)].html,%2);
    set(hotspot[get(newCommentPointTextName)].renderer,"css3d");
    set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
  );

</action>
<action name="removeComments">

  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].isComment,
      removehotspot(get(hotspot[get(i)].name));
      dec(i);
    );
  );

  for(set(i,0),i LT layer.count,inc(i),
    if(layer[get(i)].isComment,
      removelayer(get(layer[get(i)].name));
      dec(i);
    );
  );

  set(config.feature.show_comment,0);
</action>
<action name="enterEditComment">

  

  
    set(modify_comment_cmd,get(js_modify_comment));
    txtadd(modify_comment_cmd,"('");
    txtadd(modify_comment_cmd,get(config.info.id));
    txtadd(modify_comment_cmd,"','");
    txtadd(modify_comment_cmd,get(pano_id));
    txtadd(modify_comment_cmd,"')");
    set(config.feature.show_comment, 1);
    jscall(get(modify_comment_cmd));
  

  pause_autoplay();

  hide_ui();

  copy(commentAddAnimationUrl,settings.comment_add_head_bg_image);


  addhotspot(add_hotspot_comment_bg_container);
  set(hotspot[add_hotspot_comment_bg_container].ath,get(view.hlookat));
  set(hotspot[add_hotspot_comment_bg_container].atv,get(view.vlookat));
  set(hotspot[add_hotspot_comment_bg_container].width,32);
  set(hotspot[add_hotspot_comment_bg_container].height,48);
  if(device.desktop,
    set(hotspot[add_hotspot_comment_bg_container].scale,1.5);
    ,
    set(hotspot[add_hotspot_comment_bg_container].scale,2);
  );
  copy(hotspot[add_hotspot_comment_bg_container].url,settings.comment_edit_line_image);
  set(hotspot[add_hotspot_comment_bg_container].keep,false);
  set(hotspot[add_hotspot_comment_bg_container].edge,bottom);
  set(hotspot[add_hotspot_comment_bg_container].handcursor,true);
  set(hotspot[add_hotspot_comment_bg_container].enabled,true);
  set(hotspot[add_hotspot_comment_bg_container].zorder,3600);
  set(hotspot[add_hotspot_comment_bg_container].ondown,dragAddHotspot());


  addlayer(add_hotspot_comment_mask);
  set(layer[add_hotspot_comment_mask].type,"container");
  if(device.desktop,
    set(layer[add_hotspot_comment_mask].scale,1.5);
    ,
    set(layer[add_hotspot_comment_mask].scale,2.0);
  );
  set(layer[add_hotspot_comment_mask].keep,false);
  set(layer[add_hotspot_comment_mask].x,1);
  set(layer[add_hotspot_comment_mask].width,30);
  set(layer[add_hotspot_comment_mask].height,30);
  set(layer[add_hotspot_comment_mask].bgcolor,0xffffff);
  set(layer[add_hotspot_comment_mask].bgalpha,1);
  set(layer[add_hotspot_comment_mask].maskchildren,true);
  set(addCommentHotspotName,'hotspot[');
  txtadd(addCommentHotspotName,add_hotspot_comment_bg_container);
  txtadd(addCommentHotspotName,']');
  set(layer[add_hotspot_comment_mask].parent,get(addCommentHotspotName));
  set(layer[add_hotspot_comment_mask].handcursor,false);
  set(layer[add_hotspot_comment_mask].enabled,false);
  set(layer[add_hotspot_comment_mask].zorder,3601);
  set(layer[add_hotspot_comment_mask].bgroundedge,6);
  set(layer[add_hotspot_comment_mask].capture,false);

  addlayer(add_hotspot_comment_avatar);
  if(device.desktop,
    set(layer[add_hotspot_comment_avatar].scale,1.5);
    ,
    set(layer[add_hotspot_comment_avatar].scale,2);
  );
  set(layer[add_hotspot_comment_avatar].width,30);
  set(layer[add_hotspot_comment_avatar].height,"prop");
  set(newEditCommentHeadUrl,%1);
  if(newEditCommentHeadUrl.length GT 0,
    txtadd(newEditCommentHeadUrl,?imageMogr2/thumbnail/60x60!);
    set(layer[add_hotspot_comment_avatar].url,get(newEditCommentHeadUrl));
  );
  set(addCommentMaskName,'layer[');
  txtadd(addCommentMaskName,add_hotspot_comment_mask);
  txtadd(addCommentMaskName,']');
  set(layer[add_hotspot_comment_avatar].parent,get(addCommentMaskName));
  set(layer[add_hotspot_comment_avatar].handcursor,false);
  set(layer[add_hotspot_comment_avatar].enabled,false);
  set(layer[add_hotspot_comment_avatar].zorder,2602);
  set(layer[add_hotspot_comment_avatar].capture,false);


  
  addhotspot(add_comment_point_text_container);
  set(hotspot[add_comment_point_text_container].ath,get(view.hlookat));
  set(hotspot[add_comment_point_text_container].atv,get(view.vlookat));
  set(hotspot[add_comment_point_text_container].visible,true);
  set(hotspot[add_comment_point_text_container].scale,1);
  copy(hotspot[add_comment_point_text_container].url,settings.comment_edit_bg_image);
  set(hotspot[add_comment_point_text_container].css,font-family:STXihei; font-size:14px; color:#FFFFFF;letter-spacing:1px;);
  set(hotspot[add_comment_point_text_container].backgroundcolor,0xFF7F00);
  set(hotspot[add_comment_point_text_container].backgroundalpha,1);
  set(hotspot[add_comment_point_text_container].padding,10);
  set(hotspot[add_comment_point_text_container].keep,false);
  set(hotspot[add_comment_point_text_container].edge,topleft);
  set(hotspot[add_comment_point_text_container].handcursor,true);
  set(hotspot[add_comment_point_text_container].enabled,true);
  set(hotspot[add_comment_point_text_container].ondown,dragAddHotspot());

  if(device.desktop,
    set(hotspot[add_comment_point_text_container].width,178);
    set(hotspot[add_comment_point_text_container].height,52);
    set(hotspot[add_comment_point_text_container].oy,-75);
    set(hotspot[add_comment_point_text_container].ox,-26);
    set(hotspot[add_comment_point_text_container].roundedge,10);
    ,
    set(hotspot[add_comment_point_text_container].width,232);
    set(hotspot[add_comment_point_text_container].height,68);
    
    if(device.ios,
      set(hotspot[add_comment_point_text_container].oy,-100);
      set(hotspot[add_comment_point_text_container].ox,-35);
      ,
      set(hotspot[add_comment_point_text_container].oy,-100);
      set(hotspot[add_comment_point_text_container].ox,-35);
    );
    set(hotspot[add_comment_point_text_container].roundedge,18);
    set(hotspot[add_comment_point_text_container].enable,true);
  );
  set(hotspot[add_comment_point_text_container].zorder,2499);




  addlayer(add_comment_text);
  if(device.desktop,
    set(layer[add_comment_text].x,45);
    ,
    set(layer[add_comment_text].x,65);
  );
  set(layer[add_comment_text].y,-15);
  set(layer[add_comment_text].visible,true);
  set(layer[add_comment_text].scale,1);
  set(layer[add_comment_text].align,left);
  set(layer[add_comment_text].url,get(plugin_url.TEXT_SWF));
  set(layer[add_comment_text].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;);
  set(layer[add_comment_text].backgroundcolor,#000000);
  set(layer[add_comment_text].backgroundalpha,0);
  set(layer[add_comment_text].padding,8);
  set(layer[add_comment_text].keep,false);
  set(layer[add_comment_text].enabled,false);
  set(layer[add_comment_text].handcursor,false);
  set(layer[add_comment_text].alpha,0);
  set(layer[add_comment_text].zorder,2604);
  set(layer[add_comment_text].ondown,dragAddHotspot());
  set(layer[add_comment_text].parent,get(addCommentHotspotName));


  if(auto_rotate==1,stopAutoRotate());

  txtadd(addCommentTextContent,'');


  set(newCommentAth,get(view.hlookat));
  set(newCommentAtv,get(view.vlookat));


  

</action>
<action name="dragAddHotspot">
  if(%1 != dragging,
    spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery);
    sub(drag_adjustx, mouse.stagex, hotspotcenterx);
    sub(drag_adjusty, mouse.stagey, hotspotcentery);
    dragAddHotspot(dragging);
    ,
    if(pressed,
      sub(dx, mouse.stagex, drag_adjustx);
      sub(dy, mouse.stagey, drag_adjusty);
      screentosphere(dx, dy, ath, atv);
      copy(print_ath, ath);
      copy(print_atv, atv);
      roundval(print_ath, 3);
      roundval(print_atv, 3);
      set(hotspot[add_hotspot_comment_bg_container].ath,get(print_ath));
      set(hotspot[add_hotspot_comment_bg_container].atv,get(print_atv));
      set(hotspot[add_comment_text].ath,get(print_ath));
      set(hotspot[add_comment_text].atv,get(print_atv));
      set(hotspot[add_comment_point_text_container].ath,get(print_ath));
      set(hotspot[add_comment_point_text_container].atv,get(print_atv));
      delayedcall(0, dragAddHotspot(dragging) );

      set(newCommentAth,get(print_ath));
      set(newCommentAtv,get(print_atv));
      );
    );
</action>

<action name="updateInputComment">
  if(addCommentTextName!=null AND %1!=null,
    set(layer[add_comment_text].html,%1);
    txtadd(comment_tooltip_width_search, %1,'_countend');
    indexoftxt(number_of_characters,get(comment_tooltip_width_search), '_countend',0);
    if(number_of_characters LT 8 ,
      set(layer[add_comment_text].width,auto);
      ,
      set(layer[add_comment_text].width,140);
    );
    set(layer[add_comment_text].height,auto);
    delayedcall(0.2,
      set(layer[add_comment_text].alpha,1);
    );
    ,
    set(layer[add_comment_text].html,'');
  );
</action>
<action name="exitEditComment">

  removehotspot(add_hotspot_comment_bg_container);
  removelayer(add_hotspot_comment_mask);
  removelayer(add_hotspot_comment_avatar);
  removehotspot(add_comment_point_text_container);
  removelayer(add_comment_text);

  resume_autoplay();

  show_UI();

</action>
<action name="setup_contextmenu">
  if(sceneType != 3,
    
    if(device.desktop,
      set(contextmenu.item['fullscreen'].visible, true);
    );
    if(enableReport == true,
      set(contextmenu.item['openReport'].visible, true);
    );
  );
</action>

<contextmenu keep="true" fullscreen="false">
  <item name="custom1"
    caption="1"
    enabled="false"
    visible="false"
    separator="false"
    onclick="openurl(get(contextmenu.item[custom1].url));"
  />
  <item name="custom2"
    caption="2"
    enabled="false"
    visible="false"
    separator="false"
    onclick="openurl(get(contextmenu.item[custom2].url));"
  />
  <item name="custom3"
    caption="3"
    enabled="false"
    visible="false"
    separator="false"
    onclick="openurl(get(contextmenu.item[custom3].url));"
  />
  <item name="copyright"
    caption="720yun.com"
    enabled="true"
    visible="true"
    separator="true"
    onclick="openurl(https://720yun.com);"
  />

  <item name="fullscreen"
    caption="全屏切换"
    enabled="true"
    visible="false"
    separator="true"
    onclick="js_toggleFullscreen();"
  />

  <item name="viewtype"
    caption="视角切换"
    enabled="true"
    visible="true"
    separator="false"
    onclick="js_showViewType();"
  />
  <item name="controlmoveto"
    caption="切换拖拽方式为正向"
    enabled="true"
    visible="true"
    separator="false"
    showif="device.desktop"
    onclick="krpChangeMouseControl('drag');js_mouseControlChangedCallback('drag');"
  />
  <item name="controldrag"
    caption="切换拖拽方式为反向"
    enabled="true"
    visible="false"
    separator="true"
    showif="device.desktop"
    onclick="krpChangeMouseControl('moveto');js_mouseControlChangedCallback('moveto');"
  />
  <item name="openReport"
    caption="举报"
    enabled="true"
    visible="false"
    separator="true"
    onclick="js_openReport();"
  />
</contextmenu>
<action name="setup_embed">
  if(forceDisableEmbed != 1,
    if(plugin[embed_container] === null,
      addplugin(embed_container);
      set(plugin[embed_container].zorder,0);
    );
    delete(embed_video_name);
    set(embed_count,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
    for(set(i,0),i LT embed_count,inc(i),
      set(embed_name,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));
      

      if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 2,

        copy(embed_name_bk, embed_name);
        txtadd(embed_name_bk,'_bk');
        addhotspot(get(embed_name_bk));
        set(hotspot[get(embed_name_bk)].keep,false);
        set(hotspot[get(embed_name_bk)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
        set(hotspot[get(embed_name_bk)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
        set(hotspot[get(embed_name_bk)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
        set(hotspot[get(embed_name_bk)].edge,center);
        set(hotspot[get(embed_name_bk)].distorted,true);
        set(hotspot[get(embed_name_bk)].zoom,true);
        set(hotspot[get(embed_name_bk)].renderer,css3d);
        set(hotspot[get(embed_name_bk)].handcursor, false);
        set(hotspot[get(embed_name_bk)].enabled, false);
        set(hotspot[get(embed_name_bk)].visible, false);
        set(hotspot[get(embed_name_bk)].parent,'embed_container');


        addhotspot(get(embed_name));
        set(hotspot[get(embed_name)].keep,false);
        copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image[0].url);
        txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
        copy(hotspot[get(embed_name)].url,embed_image_url);
        set(hotspot[get(embed_name)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
        set(hotspot[get(embed_name)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
        set(hotspot[get(embed_name)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
        set(hotspot[get(embed_name)].rx,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_x));
        set(hotspot[get(embed_name)].ry,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_y));
        set(hotspot[get(embed_name)].rz,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_z));
        set(hotspot[get(embed_name)].edge,center);
        set(hotspot[get(embed_name)].distorted,true);
        set(hotspot[get(embed_name)].isActiveHotspot,true);
        set(hotspot[get(embed_name)].zoom,true);
        set(hotspot[get(embed_name)].renderer,css3d);
        set(hotspot[get(embed_name)].image_count, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image.count));
        set(hotspot[get(embed_name)].image_index, 0);
        set(hotspot[get(embed_name)].parent,'embed_container');


        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].play_type == 0 ,
          set(hotspot[get(embed_name)].handcursor, false);
          set(hotspot[get(embed_name)].enabled, false);
          set(hotspot[get(embed_name)].playInterval,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].interval));
          set(hotspot[get(embed_name)].onloaded,
            if(image_count GT 1,
              switch_embed_image();
            );
          );
          ,
          set(hotspot[get(embed_name)].handcursor, true);
          set(hotspot[get(embed_name)].enabled, true);
          set(hotspot[get(embed_name)].capture, false);
          set(hotspot[get(embed_name)].playInterval,0);
          set(hotspot[get(embed_name)].onclick,
            if(image_count GT 1,
              switch_embed_image_click();
            );
          );
        );
      );

      if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 3,

        addhotspot(get(embed_name));
        set(hotspot[get(embed_name)].keep,false);
        copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image_url);
        txtadd(embed_image_url,'?imageView2/2/w/2000/');
        copy(hotspot[get(embed_name)].url,embed_image_url);
        set(hotspot[get(embed_name)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
        set(hotspot[get(embed_name)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
        set(hotspot[get(embed_name)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
        set(hotspot[get(embed_name)].rx,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_x));
        set(hotspot[get(embed_name)].ry,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_y));
        set(hotspot[get(embed_name)].rz,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_z));
        set(hotspot[get(embed_name)].looptype,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].loop_type));
        set(hotspot[get(embed_name)].frame,0);
        set(hotspot[get(embed_name)].framewidth,1);
        set(hotspot[get(embed_name)].frameheight,1);
        set(hotspot[get(embed_name)].framespeed,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].frame_speed));
        set(hotspot[get(embed_name)].lastframe,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].frame_number));
        set(hotspot[get(embed_name)].edge,center);
        set(hotspot[get(embed_name)].distorted,true);
        set(hotspot[get(embed_name)].isActiveHotspot,true);
        set(hotspot[get(embed_name)].zoom,true);
        set(hotspot[get(embed_name)].renderer,css3d);
        set(hotspot[get(embed_name)].image_count, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image.count));
        set(hotspot[get(embed_name)].image_index, 0);
        set(hotspot[get(embed_name)].parent,'embed_container');

        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].play_type == 0 ,
          set(hotspot[get(embed_name)].handcursor, false);
          set(hotspot[get(embed_name)].enabled, false);
          set(hotspot[get(embed_name)].playing, true);
          set(hotspot[get(embed_name)].onloaded,
            copy(framewidth,width);
            copy(frameheight,height);
            div(frameheight,lastframe);
            txtadd(crop,'0|0|',get(framewidth),'|',get(frameheight));
            embed_animate();
          );
          ,
          set(hotspot[get(embed_name)].handcursor, true);
          set(hotspot[get(embed_name)].enabled, true);
          set(hotspot[get(embed_name)].capture, false);
          set(hotspot[get(embed_name)].playing, false);
          set(hotspot[get(embed_name)].onloaded,
            copy(framewidth,width);
            copy(frameheight,height);
            div(frameheight,lastframe);
            txtadd(crop,'0|0|',get(framewidth),'|',get(frameheight));
          );
          set(hotspot[get(embed_name)].onclick,
            toggle(playing);
            embed_animate();
          );
        );
      );

      if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 5,
          add_linear_polygon(
            get(embed_name),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].point[image_0].ath),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].point[image_0].atv),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].point[image_1].ath),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].point[image_1].atv),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].thickness),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].color),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].alpha),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].title),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath),
            get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv)
          );
      );


      jsget(isVip, 'window.interfaceObject.isVip()');
      if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 4 AND device.ie != true AND isVip == true,
        set(need_pause_bg_music_sound, true);
        set(embed_video_name, get(embed_name));
        addhotspot(get(embed_name));
        set(hotspot[get(embed_name)].keep, false);
        set(hotspot[get(embed_name)].posterurl, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].cover_url));
        set(hotspot[get(embed_name)].videourl, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].video_url));
        set(hotspot[get(embed_name)].music_pause, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].music_pause));
        set(hotspot[get(embed_name)].sound_pause, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].sound_pause));
        set(hotspot[get(embed_name)].edge,center);
        set(hotspot[get(embed_name)].distorted,true);
        set(hotspot[get(embed_name)].isActiveHotspot,true);
        copy(hotspot[get(embed_name)].url, plugin_url.VIDEO_JS);

        copy(embed_name_play, embed_name);
        txtadd(embed_name_play,'_play');
        addhotspot(get(embed_name_play));
        set(hotspot[get(embed_name_play)].keep,false);
        set(hotspot[get(embed_name_play)].scale, 0.5);
        
        set(hotspot[get(embed_name_play)].url, calc(settings.skin_url + 'skin/embed_video_play.png'));
        set(hotspot[get(embed_name_play)].edge,center);
        set(hotspot[get(embed_name_play)].distorted,true);
        set(hotspot[get(embed_name_play)].isActiveHotspot,true);
        copy(hotspot[get(embed_name_play)].target_video,embed_name);
        
        set(hotspot[get(embed_name_play)].handcursor, true);
        set(hotspot[get(embed_name_play)].visible, false);
        set(hotspot[get(embed_name_play)].onclick, toggle_embed_video(););

        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].position_type == 0,
          set(hotspot[get(embed_name)].rotate,0);
          set(hotspot[get(embed_name)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
          set(hotspot[get(embed_name)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
          set(hotspot[get(embed_name)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
          set(hotspot[get(embed_name)].rx,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_x));
          set(hotspot[get(embed_name)].ry,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_y));
          set(hotspot[get(embed_name)].rz,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].rotation_z));
          copy(hotspot[get(embed_name_play)].ath, hotspot[get(embed_name)].ath);
          copy(hotspot[get(embed_name_play)].atv, hotspot[get(embed_name)].atv);
          copy(hotspot[get(embed_name_play)].rx, hotspot[get(embed_name)].rx);
          copy(hotspot[get(embed_name_play)].ry, hotspot[get(embed_name)].ry);
          copy(hotspot[get(embed_name_play)].rz, hotspot[get(embed_name)].rz);
          ,
          set(hotspot[get(embed_name)].scale,1);
          set(hotspot[get(embed_name)].ath,0);
          set(hotspot[get(embed_name)].atv,0);
          set(hotspot[get(embed_name)].rx,0);
          set(hotspot[get(embed_name)].ry,0);
          set(hotspot[get(embed_name)].rz,0);
          set(hotspot[get(embed_name)].ox,0);
          set(hotspot[get(embed_name)].oy,0);
          
          
          set(hotspot[get(embed_name)].touchworkarounds, true);
          set(hotspot[get(embed_name)].playsinline, true);
          copy(hotspot[get(embed_name)].hfov, config.panos.pano[get(xml.scene)].embeds.embed[get(i)].hfov);
          copy(hotspot[get(embed_name)].yaw, config.panos.pano[get(xml.scene)].embeds.embed[get(i)].yaw);
          copy(hotspot[get(embed_name)].pitch, config.panos.pano[get(xml.scene)].embeds.embed[get(i)].pitch);
          copy(hotspot[get(embed_name)].roll, config.panos.pano[get(xml.scene)].embeds.embed[get(i)].roll);
          set(hotspot[get(embed_name)].onloaded, calc_pos_from_hfov_yaw_pitch_roll());
        );
        set(hotspot[get(embed_name)].autopause, false);
        set(hotspot[get(embed_name)].capture, false);
        set(hotspot[get(embed_name)].onclick, toggle_embed_video(););
        set(hotspot[get(embed_name)].handcursor, true);
        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].play_type == 1 OR device.mobile == true OR webvr.isenabled == true,
          set(hotspot[get(embed_name)].pausedonstart, true);
          ,
          set(hotspot[get(embed_name)].pausedonstart, false);
        );
        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].loop_type == 0,
          set(hotspot[get(embed_name)].loop, true);
          ,
          set(hotspot[get(embed_name)].loop, false);
        );
        if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].muted == 0,
          if(isAutoTouring == true,
            set(hotspot[get(embed_name)].muted, true);
            ,
            set(hotspot[get(embed_name)].muted, false);
          );
          set(hotspot[get(embed_name)].muted_enabled, false);
          ,
          set(hotspot[get(embed_name)].muted, true);
          set(hotspot[get(embed_name)].muted_enabled, true);
        );
        set(hotspot[get(embed_name)].onvideoready,
          if(webvr.isenabled == true,
            set(hotspot[calc(name + '_play')].visible, false);
            ,
            set(hotspot[calc(name + '_play')].visible, true);
          );
          set(hotspot[get(embed_name)].onclick, );
          set(hotspot[get(embed_name)].handcursor, false);
        );
        set(hotspot[get(embed_name)].onvideoplay,
          set(hotspot[calc(name + '_play')].visible, false);
          set(hotspot[get(embed_video_name)].onclick, toggle_embed_video(););
          set(hotspot[get(embed_video_name)].handcursor, true);
          if(need_pause_bg_music_sound,
            if(hotspot[get(embed_video_name)].music_pause == 1,
              js_toggleBgMusic(false);
            );
            if(hotspot[get(embed_video_name)].sound_pause == 1,
              js_toggleBgVoice(false);
            );
          );
          set(need_pause_bg_music_sound, false);
        );
        set(hotspot[get(embed_name)].onvideopaused,
          if(need_show_play != false,
            set(hotspot[calc(name + '_play')].visible, true);
          );
          set(hotspot[get(embed_name)].onclick, );
          set(hotspot[get(embed_name)].handcursor, false);
        );
      );
    );
    delete(embed_name);
    hide_vr_hotspot();
  );
</action>
<action name="calc_pos_from_hfov_yaw_pitch_roll">
  div(hfov,57.295779);
  div(yaw,-57.295779);
  div(pitch,57.295779);
  div(roll,-57.295779);
  mul(hfov,0.5);Math.tan(hfov);mul(width,hfov,1000);set(height,'prop');
  Math.cos(ch,yaw);Math.sin(sh,yaw);
  Math.cos(ca,pitch);Math.sin(sa,pitch);
  Math.cos(cb,roll);Math.sin(sb,roll);
  mul(m0,ca,ch);
  mul(tmp,cb,sa);mul(tmp,ch);mul(tmp2,sb,sh);add(m3,tmp,tmp2);
  mul(m4,cb,ca);
  mul(tmp,cb,sa);mul(tmp,sh);mul(tmp2,sb,ch);sub(m5n,tmp,tmp2);mul(m5n,-1);
  mul(tmp,sb,sa);mul(tmp,ch);mul(tmp2,cb,sh);sub(m6n,tmp,tmp2);mul(m6n,-1);
  Math.atan2(yaw,m6n,m0);
  Math.atan2(roll,m5n,m4);
  Math.asin(pitch,m3);
  mul(ath,yaw,57.295779);
  mul(atv,pitch,57.295779);
  mul(rotate,roll,57.295779);

  copy(hotspot[calc(name + '_play')].ath, ath);
  copy(hotspot[calc(name + '_play')].atv, atv);
  copy(hotspot[calc(name + '_play')].rotate, rotate);
</action>
<action name="embed_animate">
  if(looptype == 1 AND frame == lastframe,
    set(frame, 0);
    mul(ypos,frame,frameheight);
    txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
    set(playing, false);
    ,
    inc(frame,1,get(lastframe),0);
    mul(ypos,frame,frameheight);
    txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
    
    if(playing == true,
      delayedcall(get(framespeed), embed_animate());
    );
  );
</action>
<action name="switch_embed_image">
  if(webvr.isenabled != true,
    set(onloaded,);

    copy(switch_embed_name_bk, name);
    txtadd(switch_embed_name_bk,'_bk');

    set(hotspot[calc(name)].bk,calc(name + '_bk'));
    copy(hotspot[calc(name + '_bk')].target,name);
    copy(hotspot[calc(name + '_bk')].rx, rx);
    copy(hotspot[calc(name + '_bk')].ry, ry);
    copy(hotspot[calc(name + '_bk')].rz, rz);

    delayedcall(get(playInterval),

      set(hotspot[calc(name + '_bk')].onloaded,
        set(alpha,1);
        set(visible,true);
        add(hotspot[calc(target)].image_index,1);
        if(hotspot[calc(target)].image_index == hotspot[calc(target)].image_count,
          set(hotspot[calc(target)].image_index,0);
        );

        set(hotspot[calc(target)].onloaded,
          set(visible,true);
          set(alpha,0);

          tween(alpha,1.0,0.2,linear,
            set(hotspot[calc(bk)].visible,false);
            switch_embed_image();
          );

          delayedcall(0.1,
            tween(hotspot[calc(bk)].alpha,0.0,0.2,linear,
              set(hotspot[calc(bk)].visible,false);
            );
          );
        );
        copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[calc(target)].image[get(hotspot[calc(target)].image_index)].url);
        txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
        set(hotspot[calc(target)].url,get(embed_image_url));
      );
      copy(hotspot[calc(name + '_bk')].url,url);
    );
  );
</action>

<action name="switch_embed_image_click">

  set(onloaded,);

  copy(switch_embed_name_bk, name);
  txtadd(switch_embed_name_bk,'_bk');
  

  set(hotspot[calc(name)].bk,calc(name + '_bk'));
  copy(hotspot[calc(name + '_bk')].target,name);
  copy(hotspot[calc(name + '_bk')].rx, rx);
  copy(hotspot[calc(name + '_bk')].ry, ry);
  copy(hotspot[calc(name + '_bk')].rz, rz);

  set(hotspot[calc(name + '_bk')].onloaded,
    set(alpha,1);
    set(visible,true);
    add(hotspot[calc(target)].image_index,1);
    if(hotspot[calc(target)].image_index == hotspot[calc(target)].image_count,
      set(hotspot[calc(target)].image_index,0);
    );

    set(hotspot[calc(target)].onloaded,
      set(visible,true);
      set(alpha,0);
      tween(alpha,1.0,0.2,linear,
        set(hotspot[calc(bk)].visible,false);
      );

      delayedcall(0.1,
        tween(hotspot[calc(bk)].alpha,0.0,0.2,linear,
          set(hotspot[calc(bk)].visible,false);
        );
      );
    );
    copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[calc(target)].image[get(hotspot[calc(target)].image_index)].url);
    txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
    set(hotspot[calc(target)].url,get(embed_image_url));
  );
  copy(hotspot[calc(name + '_bk')].url,url);

</action>

<action name="muted_embed_video">
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].muted_enabled == false,
      set(hotspot[get(embed_video_name)].muted, true);
  );
</action>

<action name="unmuted_embed_video">
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].muted_enabled == false,
      set(hotspot[get(embed_video_name)].muted, false);
  );
</action>

<action name="pause_embed_video">
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].ispaused == true,
      copy(embed_name_play, embed_video_name);
      txtadd(embed_name_play,'_play');
      if(hotspot[get(embed_name_play)] !== null AND hotspot[get(embed_name_play)].visible,
        set(hotspot[get(embed_name_play)].visible, false);
        set(need_resume_play_button, true);
      );
  );
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].ispaused == false,
      hotspot[get(embed_video_name)].pause();
      set(hotspot[get(embed_video_name)].need_resume, true);
      set(hotspot[get(embed_video_name)].need_show_play, false);
  );
</action>

<action name="resume_embed_video">
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].ispaused == true,
      copy(embed_name_play, embed_video_name);
      txtadd(embed_name_play,'_play');
      if(hotspot[get(embed_name_play)] !== null AND need_resume_play_button,
        set(hotspot[get(embed_name_play)].visible, true);
        set(need_resume_play_button, false);
      );
  );
  if(embed_video_name !== null AND hotspot[get(embed_video_name)].need_resume == true,
      hotspot[get(embed_video_name)].resume();
      set(hotspot[get(embed_video_name)].need_show_play, true);
      set(hotspot[get(embed_video_name)].need_resume, false);
  );
</action>

<action name="toggle_embed_video">
  if(hotspot[get(embed_video_name)].ispaused,
    if(hotspot[get(embed_video_name)].music_pause == 1,
      js_toggleBgMusic(false);
    );
    if(hotspot[get(embed_video_name)].sound_pause == 1,
      js_toggleBgVoice(false);
    );
    ,
    if(hotspot[get(embed_video_name)].music_pause == 1,
      js_toggleBgMusic(true);
    );
    if(hotspot[get(embed_video_name)].sound_pause == 1,
      js_toggleBgVoice(true);
    );
  );
  set(need_pause_bg_music_sound, false);
  hotspot[get(embed_video_name)].togglepause();
</action>


  
<action name="add_linear_polygon">
    update_linear_polygon_title(%1,%9,%10,%11);
    addhotspot(%1);
    set(hotspot[%1].enabled, fasle);
    set(hotspot[%1].capture,false);
    set(hotspot[%1].renderer,'css3d');
    set(hotspot[%1].onclick,
        if(editing_linear_polygon_name != name,
            jscall(calc('window.onKrpEmbedClick("'+ name + '")'));
        );
    );
    update_linear_polygon_position(%1,%2,%3,%4,%5);
    update_linear_polygon_style(%1,%6,%7,%8);
    updatescreen();
</action>

<action name="remove_linear_polygon">
    end_edit_linear_polygon();
    if(%1 != null,
        removehotspot(%1);
        set(linear_polygon_txt_name, %1);
        txtadd(linear_polygon_txt_name, '_txt');
        removehotspot(get(linear_polygon_txt_name));
    );
</action>

<action name="update_linear_polygon_position">
    if(%1 != null AND %2 !== null AND %3 !== null,
        set(hotspot[%1].point[0].ath, %2);
        set(hotspot[%1].point[0].atv, %3);
    );
    if(%1 != null AND %4 !== null AND %5 !== null,
        set(hotspot[%1].point[1].ath, %4);
        set(hotspot[%1].point[1].atv, %5);
    );
</action>

<action name="update_linear_polygon_style">
    if(%2 !== null,
        set(linear_polygon_default_width, %2);
        copy(hotspot[%1].borderwidth, linear_polygon_default_width);
    );
    if(%3 != null,
        set(linear_polygon_default_color, %3);
        txtreplace(linear_polygon_default_color, '#', '0x');
        copy(hotspot[%1].bordercolor, linear_polygon_default_color);
    );
    if(%4 !== null,
        set(linear_polygon_default_alpha, %4);
        copy(hotspot[%1].borderalpha, linear_polygon_default_alpha);
    );
</action>

<action name="update_linear_polygon_title">
    if(%1 != null,
        set(linear_polygon_txt_name, %1);
        txtadd(linear_polygon_txt_name, '_txt');
        if(hotspot[get(linear_polygon_txt_name)] === null,
            addhotspot(get(linear_polygon_txt_name));
        );
        set(hotspot[get(linear_polygon_txt_name)].target_hotspot_name,%1);
        set(hotspot[get(linear_polygon_txt_name)].scale,1);
        set(hotspot[get(linear_polygon_txt_name)].capture,false);
        set(hotspot[get(linear_polygon_txt_name)].enabled, false);
        set(hotspot[get(linear_polygon_txt_name)].isActiveHotspot,true);
        set(hotspot[get(linear_polygon_txt_name)].keep,false);
        set(hotspot[get(linear_polygon_txt_name)].url,'https://ssl-player.720static.com/@/krp/1.19-pr8/plugins/textfield.swf');
        set(hotspot[get(linear_polygon_txt_name)].backgroundcolor,#000000);
        set(hotspot[get(linear_polygon_txt_name)].backgroundalpha,0.5);
        set(hotspot[get(linear_polygon_txt_name)].roundedge,5);
        set(hotspot[get(linear_polygon_txt_name)].padding,5);
        set(hotspot[get(linear_polygon_txt_name)].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;textAlign:center;);
        set(hotspot[get(linear_polygon_txt_name)].edge,center);
        set(hotspot[get(linear_polygon_txt_name)].renderer,"css3d");
        set(hotspot[get(linear_polygon_txt_name)].zorder2, 1.0);
        set(hotspot[get(linear_polygon_txt_name)].visible,true);
        set(hotspot[get(linear_polygon_txt_name)].onclick,
            if(editing_linear_polygon_name != target_hotspot_name,
                jscall(calc('window.onKrpEmbedClick("'+ target_hotspot_name + '")'));
            );
        );
        if(%3 != null,
            set(hotspot[get(linear_polygon_txt_name)].ath, %3);
        );
        if(%4 != null,
            set(hotspot[get(linear_polygon_txt_name)].atv, %4);
        );
        set(linear_txt,%2);
        if(linear_txt != null,
            set(hotspot[get(linear_polygon_txt_name)].html, %2);
            set(hotspot[get(linear_polygon_txt_name)].visible, true);
            ,
            set(hotspot[get(linear_polygon_txt_name)].html,  );
            set(hotspot[get(linear_polygon_txt_name)].visible, false);
        );
    );
</action><plugin name="gyro_plugin" keep="true" url="" devices="html5" enabled="false"  />
<action name="setup_gyro">
    if(!device.desktop AND device.html5,
	    copy(plugin[gyro_plugin].url, plugin_url.GYRO);
    );
</action>
<action name="toggle_gyro">
  js_request_gyro_promission();
  switch(plugin[gyro_plugin].enabled);
</action>
<action name="start_gyro">
  js_request_gyro_promission();
  if(isAutoTouring != true,
    set(plugin[gyro_plugin].enabled, true);
  );
</action>
<action name="stop_gyro">
  set(plugin[gyro_plugin].enabled, false);
</action><action name="setup_hotspot">
  if(plugin[hotspot_container] === null,
    addplugin(hotspot_container);
    set(plugin[hotspot_container].zorder,90);
    set(plugin[hotspot_container].keep,true);
    set(hotspot[hotspot_container].handcursor, true);
  );
</action>


<action name="add_hotspot">
    set(hotspot_name,%1);
    ifnot(%3 == 0,
      addhotspot(get(hotspot_name));
      set(hotspot[get(hotspot_name)].isActiveHotspot,true);
      set(hotspot[get(hotspot_name)].hotspot_type,%6);
      set(hotspot[get(hotspot_name)].hotspot_id,%1);
      
      
      
      set(hotspot[get(hotspot_name)].ath,%4);
      set(hotspot[get(hotspot_name)].atv,%5);

      if(displayMode === null,
        add(hotspot[get(hotspot_name)].atv,5);
      );
      
      
      
      
      
      
      if(%3 == "1",
        set(hotspot[get(hotspot_name)].scale, 0.5);
        ,
        set(hotspot[get(hotspot_name)].scale, 0.75);
      );
      if(%8 == "1",
        set(hotspot[get(hotspot_name)].frame,0);
        set(hotspot[get(hotspot_name)].framewidth,100);
        set(hotspot[get(hotspot_name)].frameheight,100);
        set(hotspot[get(hotspot_name)].isframe,%8);
        set(hotspot[get(hotspot_name)].framespeed,%10);
        set(hotspot[get(hotspot_name)].lastframe,%9);
        dec(hotspot[get(hotspot_name)].lastframe);
      );
      set(hotspot[get(hotspot_name)].capture, false);
      set(hotspot[get(hotspot_name)].keep, false);
      
      
      set(hotspot[get(hotspot_name)].handcursor, true);
      set(hotspot[get(hotspot_name)].edge, center);
      set(hotspot[get(hotspot_name)].zorder, 1000);
      
      set(hotspot[get(hotspot_name)].onclick, hotspot_action(););
      set(hotspot[get(hotspot_name)].parent,plugin[hotspot_container]);
      

      set(hotspot_name_URL,%2);
      if(%3 == "2",
        if(%8 == "1",
          txtadd(hotspot_name_URL,'?imageView2/2/w/300/');
          ,
          txtadd(hotspot_name_URL,'?imageView2/0/w/300/');
        );
        set(hotspot[get(hotspot_name)].renderer, css3d);
        set(hotspot[get(hotspot_name)].image_type, 2);
        ,
        set(hotspot[get(hotspot_name)].crop,0|0|128|128);
        indexoftxt(gif_index,%2,'_gif');
        if(gif_index GT -1,
          if(device.flash,
            set(hotspot[get(hotspot_name)].framewidth,64);
            set(hotspot[get(hotspot_name)].frameheight,64);
            txtadd(hotspot_name_URL,'?imageView2/0/w/1600');
            ,
            set(hotspot[get(hotspot_name)].framewidth,128);
            set(hotspot[get(hotspot_name)].frameheight,128);
          );
          set(hotspot[get(hotspot_name)].frame,0);
          indexoftxt(new_index,%2,'new_');
          if(new_index GT -1,
            set(hotspot[get(hotspot_name)].lastframe,24);
            ,
            set(hotspot[get(hotspot_name)].lastframe,9);
          );
          set(hotspot[get(hotspot_name)].onloaded,hotspot_animate(););
          ,
          if(device.flash,
            txtadd(hotspot_name_URL,'?imageView2/0/w/64');
            set(hotspot[get(hotspot_name)].crop,0|0|64|64);
          );
        );
      );
      set(hotspot[get(hotspot_name)].url,get(hotspot_name_URL));
    );

    if(%8 == "1",
      set(hotspot[get(hotspot_name)].renderer, css3d);
      set(hotspot[get(hotspot_name)].onloaded,
        copy(framewidth,width);
        copy(frameheight,height);
        copy(framecount,lastframe);
        inc(framecount);
        div(frameheight,framecount);
        txtadd(crop,'0|0|',get(framewidth),'|',get(frameheight));
        custom_hotspot_animate();
      );
    );

    set(hotspot_txt_string, %7);
    if(hotspot_txt_string !== null AND hotspot_txt_string != undefined AND (hotspot_txt_string != '' OR calc(%7 == '0')),
        set(hotspot_txt_name,get(hotspot_name));
        txtadd(hotspot_txt_name,"_txt");
        addhotspot(get(hotspot_txt_name));
        set(hotspot[get(hotspot_txt_name)].isActiveHotspot,true);
        set(hotspot[get(hotspot_txt_name)].hotspot_id,%1);
        set(hotspot[get(hotspot_txt_name)].hotspot_type,%6);
        set(hotspot[get(hotspot_txt_name)].is_hotspot_txt,true);
        set(hotspot[get(hotspot_txt_name)].image_type, get(hotspot[get(hotspot_name)].image_type));
        set(hotspot[get(hotspot_txt_name)].html,get(hotspot_txt_string));
        set(hotspot[get(hotspot_txt_name)].ath,%4);
        set(hotspot[get(hotspot_txt_name)].atv,get(hotspot[get(hotspot_name)].atv));
        set(hotspot[get(hotspot_txt_name)].scale,1);
        set(hotspot[get(hotspot_txt_name)].url,get(plugin_url.TEXT_SWF));
        set(hotspot[get(hotspot_txt_name)].capture,false);
        set(hotspot[get(hotspot_txt_name)].keep,false);
        
        if(hotspot[get(hotspot_name)].height === null ,
          set(hotspot[get(hotspot_name)].onloaded, 
            if(%8 == "1",
              copy(framewidth,width);
              copy(frameheight,height);
              copy(framecount, lastframe);
              inc(framecount);
              div(frameheight,framecount);
              txtadd(crop,'0|0|',get(framewidth),'|',get(frameheight));
              custom_hotspot_animate();
            );
            adjust_hotspot_position();
          );
          ,
          set(hotspot[get(hotspot_txt_name)].oy,get(hotspot[get(hotspot_name)].height));
          mul(hotspot[get(hotspot_txt_name)].oy,get(hotspot[get(hotspot_name)].scale));
          mul(hotspot[get(hotspot_txt_name)].oy,-0.5);
          sub(hotspot[get(hotspot_txt_name)].oy,6);
        );

        set(hotspot[get(hotspot_txt_name)].backgroundcolor,#000000);
        set(hotspot[get(hotspot_txt_name)].backgroundalpha,0.5);
        set(hotspot[get(hotspot_txt_name)].roundedge,5);
        set(hotspot[get(hotspot_txt_name)].padding,5);
        if(%11 === null,
          set(hotspot[get(hotspot_txt_name)].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;text-align:center;);
          ,
          set(hotspot[get(hotspot_txt_name)].css,'font-family:STXihei; font-size:');
          txtadd(hotspot[get(hotspot_txt_name)].css,%11);
          txtadd(hotspot[get(hotspot_txt_name)].css,'px; color:#ffffff;letter-spacing:1px;text-align:center;');
        );
        set(hotspot[get(hotspot_txt_name)].edge,center);
        set(hotspot[get(hotspot_txt_name)].show_txt,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].show_txt));
        set(hotspot[get(hotspot_txt_name)].onclick,hotspot_action(););

        set(hotspot[get(hotspot_txt_name)].parent, plugin[hotspot_container]);
    );

    if(webvr.isenabled,
      hide_vr_hotspot();
    );
    if(isAutoTouring == true AND config.autoTours.tour.hideHotspots == true,
      hide_hotspots();
    );
</action>

<action name="add_text_hotspot">
  addhotspot(%1);
  set(hotspot[%1].hotspot_id, %1);
  set(hotspot[%1].ath,%3);
  set(hotspot[%1].atv,%4);
  set(hotspot[%1].scale,1);
  set(hotspot[%1].keep,false);
  set(hotspot[%1].url,get(plugin_url.TEXT_SWF));
  set(hotspot[%1].html,%2);
  txtreplace(hotspot[%1].html,'&#xA;','[br]');
  set(hotspot[%1].bgshadow, "0 2 4 0x000000 0.3");

  set(hotspot_css,'font-size:12px; letter-spacing:1px;textAlign:center;');
  if(%5 != null,
    txtadd(hotspot_css, 'color:');
    txtadd(hotspot_css, %5);
    txtadd(hotspot_css, ';');
    ,
    txtadd(hotspot_css, 'color:#ffffff;');
  );
  if(%6 != null,
    txtadd(hotspot_css, '');
    ,
    txtadd(hotspot_css, '');
  );
  if(%7 !== null,
    set(hotspot[%1].backgroundcolor,%7);
    ,
    set(hotspot[%1].backgroundcolor,#000000);
    set(hotspot[%1].bgborder, 0);
  );
  if(%8 !== null,
    set(hotspot[%1].backgroundalpha,%8);
    ,
    set(hotspot[%1].backgroundalpha,0.5);
  );
  set(hotspot[%1].roundedge,2);
  set(hotspot[%1].padding,'2 6');
  set(hotspot[%1].multiline,true);
  set(hotspot[%1].oy,-9);
  set(hotspot[%1].edge,bottom);
  copy(hotspot[%1].css,hotspot_css);
  set(hotspot[%1].handcursor, true);
  set(hotspot[%1].enabled, true);
  set(hotspot[%1].renderer,"css3d");
  set(hotspot[%1].zorder2, 1.0);
  set(hotspot[%1].parent,plugin[hotspot_container]);
  set(hotspot[%1].zorder, 1000);
  set(hotspot[%1].onclick, hotspot_action(););

  set(embed_txt_bg_name,%1);
  txtadd(embed_txt_bg_name,"_bg");
  addhotspot(get(embed_txt_bg_name));
  if(%7 !== null,
    set(textbgcolor,%7);
    txtreplace(textbgcolor,'#','');
    txtreplace(textbgcolor,'0x','');
    toupper(textbgcolor);
    copy(hotspot[get(embed_txt_bg_name)].url, settings.embed_txt_colored_image);
    txtreplace(hotspot[get(embed_txt_bg_name)].url,'color',get(textbgcolor));
    if(textbgcolor == '24A566',
      set(hotspot[%1].bgborder, '1 0x31c27a 1');
      ,
      if(textbgcolor == 'ADADAD',
        set(hotspot[%1].bgborder, '1 0xbec0cd 1');
        ,
        if(textbgcolor == 'DB4437',
          set(hotspot[%1].bgborder, '1 0xF36264 1');
          ,
          if(textbgcolor == 'F5A623',
            set(hotspot[%1].bgborder, '1 0xffbb0f 1');
            ,
            if(textbgcolor == 'FFFFFF',
              set(hotspot[%1].bgborder, '1 0xc6c6c6 1');
            );
          );
        );
      );
    );
    ,
    copy(hotspot[get(embed_txt_bg_name)].url, settings.embed_txt_image);
  );
  copy(hotspot[get(embed_txt_bg_name)].ath,hotspot[%1].ath);
  copy(hotspot[get(embed_txt_bg_name)].atv,hotspot[%1].atv);
  sub(hotspot[get(embed_txt_bg_name)].atv,0.02);
  set(hotspot[get(embed_txt_bg_name)].keep,false);
  set(hotspot[get(embed_txt_bg_name)].scale,0.5);
  set(hotspot[get(embed_txt_bg_name)].edge,top);
  if(device.mobile == true,
    set(hotspot[get(embed_txt_bg_name)].oy,-6);
    ,
    set(hotspot[get(embed_txt_bg_name)].oy,-9);
  );
  set(hotspot[get(embed_txt_bg_name)].handcursor, true);
  set(hotspot[get(embed_txt_bg_name)].enabled, true);
  set(hotspot[get(embed_txt_bg_name)].renderer, 'css3d');
  copy(hotspot[get(embed_txt_bg_name)].zorder, hotspot[%1].zorder);
  add(hotspot[get(embed_txt_bg_name)].zorder, 1);
  set(hotspot[get(embed_txt_bg_name)].parent,plugin[hotspot_container]);

   if(webvr.isenabled,
    hide_vr_hotspot();
  );
</action>
<action name="remove_text_hotspot">
  removehotspot(%1);
  set(embed_txt_bg_name,%1);
  txtadd(embed_txt_bg_name,"_bg");
  removehotspot(get(embed_txt_bg_name));
</action>
<action name="update_text_hotspot_color">
  if(%2 != null,
    set(hotspot_css,'font-size:12px; letter-spacing:1px;textAlign:center;');
    txtadd(hotspot_css, 'color:');
    txtadd(hotspot_css, %2);
    txtadd(hotspot_css, ';');
    copy(hotspot[%1].css, hotspot_css);
  );
  if(%3 != null,

  );
 
  if(%4 !== null,
    set(embed_txt_bg_name,%1);
    txtadd(embed_txt_bg_name,"_bg");
    set(hotspot[%1].backgroundcolor,%4);
    set(textbgcolor,%4);
    txtreplace(textbgcolor,'#','');
    txtreplace(textbgcolor,'0x','');
    toupper(textbgcolor);
    copy(hotspot[get(embed_txt_bg_name)].url, settings.embed_txt_colored_image);
    txtreplace(hotspot[get(embed_txt_bg_name)].url,'color',get(textbgcolor));
    if(textbgcolor == '24A566',
      set(hotspot[%1].bgborder, '1 0x31c27a 1');
      ,
      if(textbgcolor == 'ADADAD',
        set(hotspot[%1].bgborder, '1 0xbec0cd 1');
        ,
        if(textbgcolor == 'DB4437',
          set(hotspot[%1].bgborder, '1 0xF36264 1');
          ,
          if(textbgcolor == 'F5A623',
            set(hotspot[%1].bgborder, '1 0xffbb0f 1');
            ,
            if(textbgcolor == 'FFFFFF',
              set(hotspot[%1].bgborder, '1 0xc6c6c6 1');
            );
          );
        );
      );
    );
  );
  if(%5 !== null,
    set(hotspot[%1].backgroundalpha,%5);
  );
</action>
<action name="adjust_frame_hotspot">

  
</action>

<action name="adjust_hotspot_position">
  delayedcall(0.1,
    set(hotspot_loaded_txt_name,get(name));
    txtadd(hotspot_loaded_txt_name,"_txt");
    set(hotspot[get(hotspot_loaded_txt_name)].oy,get(hotspot[get(name)].height));
    mul(hotspot[get(hotspot_loaded_txt_name)].oy,get(hotspot[get(name)].scale));
    mul(hotspot[get(hotspot_loaded_txt_name)].oy,-0.5);
    sub(hotspot[get(hotspot_loaded_txt_name)].oy,11);
    sub(hotspot[get(hotspot_loaded_txt_name)].oy,5);
  );
</action>

<action name="hotspot_action">
  js_hotspotClickCallback(get(hotspot_id));
  
  
  if(hotspot_type == 5,
    muted_embed_video();
  );
</action>

<action name="hotspot_animate">
  inc(frame,1,get(lastframe),0);
  mul(ypos,frame,frameheight);
  txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
  delayedcall(0.03, hotspot_animate());
</action>
<action name="custom_hotspot_animate">
    inc(frame,1,get(lastframe),0);
    mul(ypos,frame,frameheight);
    txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
    delayedcall(get(framespeed), custom_hotspot_animate());
</action>


<action name="show_hotspots">
  set(plugin[hotspot_container].visible , true);
  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].isActiveHotspot,
      set(hotspot[get(i)].visible,true);
    );
  );
</action>
<action name="hide_hotspots">
  set(plugin[hotspot_container].visible , false);
  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].isActiveHotspot,
      set(hotspot[get(i)].visible,false);
    );
  );
</action>

<polygon_swap_data>
    <point name="p0" ath="0" atv="0" />
    <point name="p1" ath="5" atv="0" />
    <point name="p2" ath="0" atv="5" />
    <point name="p3" ath="5" atv="5" />
</polygon_swap_data>

  
<action name="add_polygon">
    if(%1 != null,
        addhotspot(%1);
        for(set(i,0),i LT polygon_swap_data.point.count,inc(i),
            copy(hotspot[%1].point[get(i)].ath, polygon_swap_data.point[get(i)].ath);
            copy(hotspot[%1].point[get(i)].atv, polygon_swap_data.point[get(i)].atv);
        );
        set(hotspot[%1].title, %13);
        set(hotspot[%1].isActiveHotspot,true);
        set(hotspot[%1].hotspot_type,%12);
        set(hotspot[%1].hotspot_id, %1);
        set(hotspot[%1].capture, false);
        set(hotspot[%1].zorder, 1000);
        set(hotspot[%1].onclick, hotspot_action(););
        update_polygon_style(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11);
        update_polygon_title(%1, %13, %14);
    );
</action>
<action name="update_polygon_title">
    if(%1 != null,
        set(polygon_txt_name, %1);
        txtadd(polygon_txt_name, '_txt');
        set(hotspot[%1].title, %2);

        if(hotspot[get(polygon_txt_name)] === null, 
            addhotspot(get(polygon_txt_name));
        );
        if(hotspot[%1].title !== null AND hotspot[%1].title != '' AND hotspot[%1].title != undefined AND hotspot[%1].point.count GT 0,
            set(hotspot[get(polygon_txt_name)].target_hotspot_name,%1);
            set(hotspot[get(polygon_txt_name)].scale,1);
            set(hotspot[get(polygon_txt_name)].capture,false);
            set(hotspot[get(polygon_txt_name)].isActiveHotspot,true);
            set(hotspot[get(polygon_txt_name)].hotspot_id,%1);
            copy(hotspot[get(polygon_txt_name)].hotspot_type,hotspot[%1].hotspot_type);
            set(hotspot[get(polygon_txt_name)].keep,false);
            set(hotspot[get(polygon_txt_name)].url,'https://ssl-player.720static.com/@/krp/1.19-pr8/plugins/textfield.swf');
            set(hotspot[get(polygon_txt_name)].backgroundcolor,#000000);
            set(hotspot[get(polygon_txt_name)].backgroundalpha,0.5);
            set(hotspot[get(polygon_txt_name)].roundedge,5);
            set(hotspot[get(polygon_txt_name)].padding,5);
             if(%3 === null,
                set(hotspot[get(polygon_txt_name)].css, font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;text-align:center;);
                ,
                set(hotspot[get(polygon_txt_name)].css,'font-family:STXihei; font-size:');
                txtadd(hotspot[get(polygon_txt_name)].css,%3);
                txtadd(hotspot[get(polygon_txt_name)].css,'px; color:#ffffff;letter-spacing:1px;text-align:center;');
            );
            set(hotspot[get(polygon_txt_name)].edge,center);
            set(hotspot[get(polygon_txt_name)].visible,true);
            copy(hotspot[get(polygon_txt_name)].html,hotspot[%1].title);
            set(hotspot[get(polygon_txt_name)].onclick,
                if(target_hotspot_name != editing_polygon_name,
                    hotspot_action();
                );
            );
            update_polygon_title_postion(%1);
            ,
            set(hotspot[get(polygon_txt_name)].visible,false);
        );
    );
    if(webvr.isenabled,
      hide_vr_hotspot();
    );
</action>
<action name="update_polygon_title_postion">
    copy(toAth,hotspot[%1].point[0].ath);
    copy(toAtv,hotspot[%1].point[0].atv);
    for(set(i,1),i LT hotspot[%1].point.count,inc(i),
        if(hotspot[%1].point[get(i)].atv LT toAtv,
            copy(toAth, hotspot[%1].point[get(i)].ath);
            copy(toAtv, hotspot[%1].point[get(i)].atv);
        );
    );
    copy(hotspot[get(polygon_txt_name)].ath, toAth);
    copy(hotspot[get(polygon_txt_name)].atv, toAtv);
    sub(hotspot[get(polygon_txt_name)].atv, 2);
</action>



  
<action name="remove_polygon">
    if(%1 != null,
        set(polygon_txt_name, %1);
        txtadd(polygon_txt_name, '_txt');
        removehotspot(%1);
        removehotspot(get(polygon_txt_name));
    );
</action>

<action name="update_polygon_style">
    if(%1 != null,

        if(%2 !== null,
            set(hotspot[%1].fillcolor, %2);
            set(hotspot[%1].normal_color, %2);
        );

        if(%3 !== null,
            set(hotspot[%1].normal_alpha, %3);
            set(hotspot[%1].fillalpha, %3);
        );

        if(%4 !== null,
            set(hotspot[%1].normal_border_width, %4);
            set(hotspot[%1].borderwidth, %4);
        );

        if(%5 !== null,
            set(hotspot[%1].normal_border_color, %5);
            set(hotspot[%1].bordercolor, %5);
        );

        if(%6 !== null,
            set(hotspot[%1].normal_border_alpha, %6);
            set(hotspot[%1].borderalpha, %6);
        );

        set(hotspot[%1].over_color, %7);
        set(hotspot[%1].over_alpha, %8);
        set(hotspot[%1].over_border_width, %9);
        set(hotspot[%1].over_border_color, %10);
        set(hotspot[%1].over_border_alpha, %11);

        if(%7 !== null OR %8 !== null OR %9 !== null OR %10 !== null OR %11 !== null,
            set(hotspot[%1].onover,
                if(over_color !== null,
                    tween(fillcolor, get(over_color));
                );
                if(over_alpha !== null,
                    tween(fillalpha, get(over_alpha));
                );
                if(over_border_width !== null,
                    tween(borderwidth, get(over_border_width));
                );
                if(over_border_color !== null,
                    tween(bordercolor, get(over_border_color));
                );
                if(over_border_alpha !== null,
                    tween(borderalpha, get(over_border_alpha));
                );
            );
            set(hotspot[%1].onout,
                if(normal_color !== null,
                    tween(fillcolor, get(normal_color));
                );
                if(normal_alpha !== null,
                    tween(fillalpha, get(normal_alpha));
                );
                if(normal_border_width !== null,
                    tween(borderwidth, get(normal_border_width));
                );
                if(normal_border_color !== null,
                    tween(bordercolor, get(normal_border_color));
                );
                if(normal_border_alpha !== null,
                    tween(borderalpha, get(normal_border_alpha));
                );
            );
            if(device.mouse == false,
               set(hotspot[%1].ondown,
                if(over_color !== null,
                    tween(fillcolor, get(over_color));
                );
                if(over_alpha !== null,
                    tween(fillalpha, get(over_alpha));
                );
                if(over_border_width !== null,
                    tween(borderwidth, get(over_border_width));
                );
                if(over_border_color !== null,
                    tween(bordercolor, get(over_border_color));
                );
                if(over_border_alpha !== null,
                    tween(borderalpha, get(over_border_alpha));
                );
            );
            set(hotspot[%1].onup,
                if(normal_color !== null,
                    tween(fillcolor, get(normal_color));
                );
                if(normal_alpha !== null,
                    tween(fillalpha, get(normal_alpha));
                );
                if(normal_border_width !== null,
                    tween(borderwidth, get(normal_border_width));
                );
                if(normal_border_color !== null,
                    tween(bordercolor, get(normal_border_color));
                );
                if(normal_border_alpha !== null,
                    tween(borderalpha, get(normal_border_alpha));
                );
            );
        );
            ,
            set(hotspot[%1].onover,null);
            set(hotspot[%1].onout,null);
        );
    );
</action><action name="setup_littleplanet_view">
	if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
		set(config.panos.pano[get(scene_name)].view.fovmin,70);
	);
	if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
		set(config.panos.pano[get(scene_name)].view.fovmax,120);
	);
	if(forceFov !== null,
		copy(config.panos.pano[get(scene_name)].view.fov, forceFov);
		copy(config.panos.pano[get(scene_name)].view.fovmin, forceFovmin);
		copy(config.panos.pano[get(scene_name)].view.fovmax, forceFovmax);
	);

	if(enableLittleplanet == 1,
		set(view.fovmax, 170);
		set(view.limitview, lookto);
		set(view.vlookatmin, 90);
		set(view.vlookatmax, 90);
		lookat(calc(lp_hlookat + 180), 90, 150, 1, 0, 0);
		,
		if(enableLittleplanet == 2,
				copy(view.hlookat, config.panos.pano[get(xml.scene)].view.hlookat);
				copy(view.vlookat, config.panos.pano[get(xml.scene)].view.vlookat);
				copy(view.fov, config.panos.pano[get(xml.scene)].view.fov);
				copy(view.fovmax, config.panos.pano[get(xml.scene)].view.fovmax);
				copy(view.limitview, config.panos.pano[get(xml.scene)].view.limitview);
				add(view.hlookat, 360);
			,
			if(enableLittleplanet == 3,
				set(view.fisheye, 1.0);
				set(view.fov, 150);
    		set(view.vlookat, -65);
    		set(view.hlookat, get(config.panos.pano[get(xml.scene)].hlookat));
				,
				if(enableLittleplanet == 4,
					set(view.fov, 110);
					set(view.architectural, 0.0);
  				set(view.pannini, 0.0);
  				set(view.distortion,    2.8);
					,
					if(enableLittleplanet == 5,
						set(view.architectural, 0.0);
						set(view.fovmax, 150);
						set(view.fov, 150);
						set(view.fisheye, 1.0);
					);
				);
			);
		);
	);
</action>

<action name="setup_littleplanet">
  set(control.usercontrol, off);
	copy(lp_scene, xml.scene);
	copy(lp_hlookat, config.panos.pano[get(xml.scene)].view.hlookat);
	copy(lp_vlookat, config.panos.pano[get(xml.scene)].view.vlookat);
	copy(lp_fov, config.panos.pano[get(xml.scene)].view.fov);
	copy(lp_fovmax, config.panos.pano[get(xml.scene)].view.fovmax);
	copy(lp_limitview, config.panos.pano[get(xml.scene)].view.limitview);

	if(enableLittleplanet == 1,
		startViewAnimation1();
		,
		if(enableLittleplanet == 2,
			startViewAnimation2();
			,
			if(enableLittleplanet == 3,
				startViewAnimation3();
				,
				if(enableLittleplanet == 4,
					startViewAnimation4();
					,
					if(enableLittleplanet == 5,
						startViewAnimation5();
					);
				);
			);
		);
	);
	autorotate.stop();
</action>

<action name="startViewAnimation1">
	set(view.fovmax, 170);
	set(view.limitview, lookto);
	set(view.vlookatmin, 90);
	set(view.vlookatmax, 90);
	lookat(calc(lp_hlookat + 180), 90, 150, 1, 0, 0);
	set(events[lp_events].onpreviewcomplete,
		delayedcall(2,
			if(lp_scene === xml.scene,
				set(control.usercontrol, off);
				copy(view.limitview, lp_limitview);
				set(view.vlookatmin, null);
				set(view.vlookatmax, null);
        tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
					3.0, easeOutQuad,
					animationComplete();
					);
			  );
		  );
	  );
</action>

<action name="startViewAnimation2">
	copy(view.hlookat, config.panos.pano[get(xml.scene)].view.hlookat);
	sub(view.hlookat, 360);
	set(events[lp_events].onpreviewcomplete,
		delayedcall(1,
			if(lp_scene === xml.scene,
				set(control.usercontrol, off);
        tween(view.hlookat, get(lp_hlookat),
					12.0, easeInOutSine,
						animationComplete();
					);
			  );
		  );
	  );
</action>

<action name="startViewAnimation3">
		set(view.fov, 70);
    set(view.vlookat, -40);
    set(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat));
		sub(view.hlookat, 360);
    tween(view.vlookat, 90, 9, easeInOutSine);
    delayedcall(animation2_0,2,
        tween(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat), 7.5, easeInOutSine);
        tween(view.fov, 150.0, 7.5, easeInOutSine);
        delayedcall(animation2_1,7.6,
						tween(view.fisheye, 0.0,3);
            tween(view.vlookat, get(config.panos.pano[get(xml.scene)].view.vlookat), 3, easeInOutSine);
            tween(view.fov, get(config.panos.pano[get(xml.scene)].view.fov), 3, easeInOutSine,
                animationComplete();
            );
        );
    );
</action>

<action name="startViewAnimation4">
	set(view.fov, 110);
	set(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat));
	sub(view.hlookat, 360);
 	tween(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat), 7.5, easeInOutSine);
	tween(view.vlookat, get(config.panos.pano[get(xml.scene)].view.vlookat), 7.5, easeInOutSine);
	delayedcall(3.5, tween(view.distortion,    0, 4, easeInOutSine););
	tween(view.fov, get(config.panos.pano[get(xml.scene)].view.fov), 7.5, easeInOutSine,
				animationComplete();
	);
</action>

<action name="startViewAnimation5">
	set(view.fov, 150);
		set(view.vlookat, -65);
		set(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat));
		add(view.hlookat, 360);
    tween(view.vlookat, 90.0, 9.5, easeInOutSine);
    tween(view.hlookat, get(config.panos.pano[get(xml.scene)].view.hlookat), 9.5, easeInOutSine);
    delayedcall(animation3_0,9.6,
				tween(view.fisheye, 0.0,3);
        tween(view.fov, get(config.panos.pano[get(xml.scene)].view.fov), 3, easeInOutSine,
					animationComplete();
				);
				delayedcall(0.5, tween(view.vlookat, get(config.panos.pano[get(xml.scene)].view.vlookat), 2.5, easeInOutSine););
    );
</action>

<action name="animationComplete">
	set(control.usercontrol, all);
	setup_pano_settings();
	setup_global_settings();
	js_sceneReadyCallback();
	setup_autoplay();
	autorotate.interrupt();
</action><action name="setup_top_mask">
  if(config.panos.pano[get(scene_name)].top_circle !== null AND config.panos.pano[get(scene_name)].top_circle.type != 1 AND forceDisableMask != 1,
    addhotspot(top_mask_layer);
    set(hotspot[top_mask_layer].ath,0);
    set(hotspot[top_mask_layer].atv,-90);
    if(config.panos.pano[get(scene_name)].top_circle.scale !== null,
      set(hotspot[top_mask_layer].scale, get(config.panos.pano[get(scene_name)].top_circle.scale));
    );
    set(hotspot[top_mask_layer].rotate,0.0);
    set(hotspot[top_mask_layer].distorted,true);
    set(hotspot[top_mask_layer].enabled,false);
    set(hotspot[top_mask_layer].handcursor,false);
    set(hotspot[top_mask_layer].visible,true);
    set(hotspot[top_mask_layer].keep,false);
    if(config.panos.pano[get(scene_name)].top_circle.is_float == 1,
      set(hotspot[top_mask_layer].distorted,false);
      set(hotspot[top_mask_layer].zoom,true);
    );
    if(config.panos.pano[get(scene_name)].top_circle.type == 0,
      copy(hotspot[top_mask_layer].url, settings.circle_mask);
      ,

      copy(top_circle_url,config.panos.pano[get(scene_name)].top_circle.url);
      txtadd(top_circle_url,'?imageView2/0/w/1024/h/1024');
      copy(hotspot[top_mask_layer].url,top_circle_url);
    );
  );
</action>
<action name="setup_bottom_mask">
  if(config.panos.pano[get(scene_name)].bottom_circle !== null AND config.panos.pano[get(scene_name)].bottom_circle.type != 1 AND forceDisableMask != 1,
    addhotspot(bottom_mask_layer);
    if(config.panos.pano[get(scene_name)].bottom_circle.scale !== null,
      set(hotspot[bottom_mask_layer].scale, get(config.panos.pano[get(scene_name)].bottom_circle.scale));
    );
    set(hotspot[bottom_mask_layer].ath,0);
    set(hotspot[bottom_mask_layer].atv,90);
    set(hotspot[bottom_mask_layer].rotate,0.0);
    set(hotspot[bottom_mask_layer].distorted,true);
    set(hotspot[bottom_mask_layer].enabled,false);
    set(hotspot[bottom_mask_layer].handcursor,false);
    set(hotspot[bottom_mask_layer].visible,true);
    set(hotspot[bottom_mask_layer].keep,false);
    set(hotspot[bottom_mask_layer].zorder,0);
    if(config.panos.pano[get(scene_name)].bottom_circle.is_float == 1,
      set(hotspot[bottom_mask_layer].distorted,false);
      set(hotspot[bottom_mask_layer].zoom,true);
    );
    if(config.panos.pano[get(scene_name)].bottom_circle.type == 0,
      copy(hotspot[bottom_mask_layer].url, settings.circle_mask);
      ,
      copy(bottom_circle_url,config.panos.pano[get(scene_name)].bottom_circle.url);
      txtadd(bottom_circle_url,'?imageView2/0/w/1024/h/1024');
      copy(hotspot[bottom_mask_layer].url,bottom_circle_url);
    );
  );
</action>

  <action name="setup_radar">
    set(radarEnabled, false);
    if((sceneType == 1 OR sceneType == 3) AND (config.panos.pano[get(scene_name)].radar.enabled == 1 OR config.panos.pano[get(scene_name)].radar.enable == 1),
      set(radarEnabled, true);
      set(layer[radar_layer].type,container);
      set(layer[radar_layer].align,topright);
      set(layer[radar_layer].width,200);
      set(layer[radar_layer].height,200);
      set(layer[radar_layer].bgcapture, true);
      set(layer[radar_layer].handcursor, false);
      set(layer[radar_layer].onclick,toggleRadar();set(layer[radarImageClose].visible,false);js_radarMapFullscreenStatusDidChangeCallback(false););


      if(device.html5 ,
        add(layer[radar_layer].width,4);
        add(layer[radar_layer].height,4);
      );
      if(device.desktop,
        set(layer[radar_layer].y,55);
        set(layer[radar_layer].x,-313);
        ,
        set(layer[radar_layer].y,60);
        set(layer[radar_layer].x,-313);
      );
      set(layer[radar_layer].bgalpha,0);
      set(layer[radar_layer].zorder,5);
      set(destpos1,-313);
      set(destpos2,-100);


      addlayer(radarBtn);
      set(layer[radarBtn].parent,feature_container);
      set(layer[radarBtn].align,centerright);
      set(layer[radarBtn].scale,0.5);
      set(layer[radarBtn].x,0);
      set(layer[radarBtn].y,0);
      if(sceneType == 1,
        set(layer[radarBtn].crop,2|107|108|192);
        layer[radarBtn].loadstyle(skin_style);
        set(layer[radarBtn].title,  '沙盘开关');
        set(layer[radarBtn].onclick,
          toggleRadar();
        );
        ,
        set(layer[radarBtn].scale,0);
        set(layer[radarBtn].width,0);
        set(layer[radarBtn].height,0);
      );


      addlayer(mapImage);
      set(layer[mapImage].parent,radar_layer);
      set(layer[mapImage].align,center);
      set(layer[mapImage].x,0);
      set(layer[mapImage].y,0);
      set(map_url,get(config.panos.pano[get(scene_name)].radar.map_url));
      txtadd(map_url,'?imageMogr2/thumbnail/480x');
      set(layer[mapImage].url,get(map_url));
      set(layer[mapImage].zorder,9);
      set(layer[mapImage].handcursor,false);
      set(layer[mapImage].onloaded,set(radarImageWidth,get(width));set(radarImageHeight,get(height));set(layer[mapImage].width,200);set(layer[mapImage].height,200););

      addlayer(mapImageLoading);
      set(layer[mapImageLoading].parent,radar_layer);
      set(layer[mapImageLoading].align,center);
      set(layer[mapImageLoading].x,0);
      set(layer[mapImageLoading].y,0);
      set(layer[mapImageLoading].zorder,7);
      set(layer[mapImageLoading].handcursor,false);

      addlayer(radarMask);
      set(layer[radarMask].parent,mapImage);
      set(layer[radarMask].type,container);
      set(layer[radarMask].align,lefttop);
      set(layer[radarMask].width,100%);
      set(layer[radarMask].height,100%);
      set(layer[radarMask].maskchildren,true);



      addlayer(mapZoomBtn);
      set(layer[mapZoomBtn].parent,radar_layer);
      set(layer[mapZoomBtn].align,bottomcenter);
      set(layer[mapZoomBtn].width,120);
      set(layer[mapZoomBtn].height,50);
      set(layer[mapZoomBtn].scale,0.75);
      set(layer[mapZoomBtn].x,0);
      set(layer[mapZoomBtn].y,-35);
      copy(layer[mapZoomBtn].url,settings.map_zoom_image);
      set(layer[mapZoomBtn].zorder,10);
      set(layer[mapZoomBtn].handcursor,true);
      set(layer[mapZoomBtn].onclick,zoomRadar(););

      txtadd(radarActiveSpotName,'radarActiveSpot');
      txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
      addlayer(get(radarActiveSpotName));
      set(layer[get(radarActiveSpotName)].parent,radarMask);
      set(layer[get(radarActiveSpotName)].crop,279|109|49|49);
      layer[get(radarActiveSpotName)].loadstyle(skin_style);
      set(layer[get(radarActiveSpotName)].align,lefttop);
      set(layer[get(radarActiveSpotName)].edge,center);
      set(layer[get(radarActiveSpotName)].visible,false);

      if(config.panos.pano[get(scene_name)].radar.heading_offset !== null,
        set(layer[get(radarActiveSpotName)].visible,true);
        if(config.panos.pano[get(scene_name)].radar.scale === null,
            set(layer[get(radarActiveSpotName)].scale,0.5);
            ,
            set(layer[get(radarActiveSpotName)].scale,get(config.panos.pano[get(scene_name)].radar.scale));
          );
        set(radarx,get(config.panos.pano[get(scene_name)].radar.x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.y));
        div(radarx,2.4);
        set(layer[get(radarActiveSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarActiveSpotName)].y,get(radary));
        set(layer[get(radarActiveSpotName)].zorder,10);
        set(layer[get(radarActiveSpotName)].linkedSceneTitle,get(config.panos.pano[get(scene_name)].info.title));
        set(layer[get(radarActiveSpotName)].onhover,showtext(get(linkedSceneTitle),tooltipTextStyle););

      );

      addlayer(radarImageClose);
      copy(layer[radarImageClose].url,settings.close_image);
      set(layer[radarImageClose].align,topright);
      set(layer[radarImageClose].x,0);
      set(layer[radarImageClose].y,0);
      if(config.panos.pano[get(scene_name)].inner=="1" AND device.mobile==true,
        set(layer[radarImageClose].y,61);
      );
      set(layer[radarImageClose].visible,false);
      set(layer[radarImageClose].scale,0.5);
      set(layer[radarImageClose].autowidth,true);
      set(layer[radarImageClose].autoheight,true);
      set(layer[radarImageClose].background,false);
      set(layer[radarImageClose].zorder,101);
      set(layer[radarImageClose].border,false);
      set(layer[radarImageClose].onclick,toggleRadar();set(layer[radarImageClose].visible,false);js_radarMapFullscreenStatusDidChangeCallback(false););
      set(layer[radarImageClose].parent,layer[radar_layer]);

      if(config.panos.pano[get(scene_name)].radar.heading_offset !== null,
        addlayer(radar);
        set(layer[radar].parent,radarMask);
        if(device.flash,
          set(layer[radar].url,get(plugin_url.RADAR_SWF));
          ,
          set(layer[radar].url,get(plugin_url.RADAR_JS));
        );
        set(layer[radar].align,lefttop);
        set(layer[radar].edge,center);
        set(layer[radar].scale,0.5);
        set(layer[radar].zorder,9);
        set(layer[radar].fillcolor,0xFFFFFF);
        set(layer[radar].fillalpha,0.4);
        set(layer[radar].linecolor,0xFF0000);
        set(layer[radar].linewidth,1.0);
        set(layer[radar].linealpha,0.5);
        set(layer[radar].headingoffset,get(config.panos.pano[get(scene_name)].radar.heading_offset));
        set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
        set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));
      );


      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),

        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
        addlayer(get(radarSpotName));
        set(layer[get(radarSpotName)].parent,radarMask);
        set(layer[get(radarSpotName)].crop,195|109|80|80);
        layer[get(radarSpotName)].loadstyle(skin_style);
        set(layer[get(radarSpotName)].align,lefttop);
        set(layer[get(radarSpotName)].edge,center);
        if(config.panos.pano[get(scene_name)].radar.scale === null,
          set(layer[get(radarSpotName)].scale,0.35);
          ,
          set(layer[get(radarSpotName)].scale,get(config.panos.pano[get(scene_name)].radar.scale));
        );
        set(radarx,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        div(radarx,2.4);
        set(layer[get(radarSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarSpotName)].y,get(radary));
        set(layer[get(radarSpotName)].zorder,2);
        set(layer[get(radarSpotName)].linkedScene,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].linkedscene));
        set(layer[get(radarSpotName)].linkedSceneTitle,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].title));
        set(layer[get(radarSpotName)].onhover,showtext(get(linkedSceneTitle),tooltipTextStyle););
        set(layer[get(radarSpotName)].onclick,

        js_sceneChangeCallback(get(scene[get(linkedscene)].scene_id));
        );
      );
      set(radarOldStatus,true);
    );

    if(config.panos.pano[get(scene_name)].radar.opened=="1" AND radarIsShow === null,
      set(radarIsShow,false);
      toggleRadar();
      ,
      if(radarIsShow==true AND vrmode!=true,
        set(radarIsShow,false);
        toggleRadar();
        ,
        if(radarEnabled == true,
          js_radarMapStatusDidChangeCallback(false);
        );
        set(layer[radarBtn].crop,98|107|108|192);
      );
    );

    if(webvr.isenabled == true,
      hide_UI(0,1);
    );

  </action>
  <action name="zoomRadar">

      set(layer[radar_layer].bgalpha,0.5);
      set(layer[radarBtn].visible,false);
      set(layer[radarImageClose].visible,true);

      set(radarOldPosX,get(layer[radar_layer].x));
      set(radarOldPosY,get(layer[radar_layer].y));

      set(layer[radar_layer].height,100%);
      set(layer[radar_layer].width,100%);
      set(layer[radar_layer].x,0);
      set(layer[radar_layer].y,0);

      set(radarImageScale,get(radarImageWidth));
      div(radarImageScale,get(radarImageHeight));
      set(radarStageScale,get(stagewidth));
      mul(radarStageScale,0.8);
      div(radarStageScale,get(stageheight));
      div(radarImageScale,0.8);

      if(radarImageWidth LT stagewidth AND radarImageHeight LT stageheight,
        set(layer[mapImage].width,get(radarImageWidth));
        set(layer[mapImage].height,get(radarImageHeight));
        ,
        if(radarImageScale GT radarStageScale,
          set(layer[mapImage].width,get(stagewidth));
          mul(layer[mapImage].width,0.8);
          set(layer[mapImage].height,get(radarImageHeight));
          mul(layer[mapImage].height,get(layer[mapImage].width));
          div(layer[mapImage].height,get(radarImageWidth));
          ,
          set(layer[mapImage].height,get(stageheight));
          mul(layer[mapImage].height,0.8);
          set(layer[mapImage].width,get(radarImageWidth));
          mul(layer[mapImage].width,get(layer[mapImage].height));
          div(layer[mapImage].width,get(radarImageHeight));
        );
      );



      set(layer[get(radarActiveSpotName)].x,get(config.panos.pano[get(scene_name)].radar.x));
      mul(layer[get(radarActiveSpotName)].x,get(layer[mapImage].width));
      div(layer[get(radarActiveSpotName)].x,480);

      set(layer[get(radarActiveSpotName)].y,get(config.panos.pano[get(scene_name)].radar.y));
      mul(layer[get(radarActiveSpotName)].y,get(layer[mapImage].height));
      div(layer[get(radarActiveSpotName)].y,480);

      set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
      set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));

      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),
        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));

        set(layer[get(radarSpotName)].x,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        mul(layer[get(radarSpotName)].x,get(layer[mapImage].width));
        div(layer[get(radarSpotName)].x,480);

        set(layer[get(radarSpotName)].y,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        mul(layer[get(radarSpotName)].y,get(layer[mapImage].width));
        div(layer[get(radarSpotName)].y,480);

      );

      pause_autoplay();
      hide_UI(1);
      js_radarMapFullscreenStatusDidChangeCallback(true);
  </action>
  <action name="toggleRadar">
    set(layer[radar_layer].bgalpha,0);
    set(layer[radarImageClose].visible,false);
    set(layer[radarBtn].visible,true);

    if(layer[radar_layer].height == 100%,
      set(layer[radar_layer].width,200);
      set(layer[radar_layer].height,200);
      set(layer[mapImage].width,200);
      set(layer[mapImage].height,200);
      set(layer[radar_layer].x,get(radarOldPosX));
      set(layer[radar_layer].y,get(radarOldPosY));


      set(radarx,get(config.panos.pano[get(scene_name)].radar.x));
      set(radary,get(config.panos.pano[get(scene_name)].radar.y));
      div(radarx,2.4);
      set(layer[get(radarActiveSpotName)].x,get(radarx));
      div(radary,2.4);
      set(layer[get(radarActiveSpotName)].y,get(radary));

      set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
      set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));

      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),
        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
        set(radarx,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        div(radarx,2.4);
        set(layer[get(radarSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarSpotName)].y,get(radary));
      );
      ,
      if(radarIsShow == true,
         if(device.mobile,
          set(destpos1, -313);
          ,
          set(destpos1, -313);
        );
        set(layer[radarBtn].crop,98|107|108|192);
        set(radarIsShow,false);
        
        ,
        if(device.mobile,
          set(destpos1, 50);
          ,
          set(destpos1, 66);
        );
        set(layer[radarBtn].crop,2|107|108|192);
        set(radarIsShow,true);
        
      );
      tween(layer[radar_layer].x,get(destpos1));
      if(radarEnabled == true,
        js_radarMapStatusDidChangeCallback(get(radarIsShow));
      );
    );

    if(isAutoTouring OR webvr.isenabled,
      hide_UI();
      ,
      
      show_UI();
    );

  </action>
<action name="switch_to_multires">
  for(set(i,0), i LT scene.count, inc(i),
    txtreplace(scene[get(i)].content, "webvr.isenabled AND device.desktop", "webvr.isenabled OR device.desktop");
  );
  ifnot(xml.scene === null,
    loadscene(get(xml.scene),null,KEEPVIEW|MERGE,BLEND(0.5, easeInCubic));
  );
</action>
<action name="switch_to_mobile">
  for(set(i,0), i LT scene.count, inc(i),
    txtreplace(scene[get(i)].content, "webvr.isenabled OR device.desktop", "webvr.isenabled AND device.desktop");
  );
  ifnot(xml.scene === null,
    loadscene(get(xml.scene),null,KEEPVIEW|MERGE,BLEND(0.5, easeInCubic));
  );
</action>
<action name="load_pano_by_id">
  if(pano_id != %1,
    if(autorotate.enabled == true,
      set(autorotate.enabled, false);
    );
    

    

    
    
    if(hotspot[get(embed_video_name)].music_pause == 1 AND hotspot[get(embed_video_name)].ispaused == false AND need_pause_bg_music_sound == false,
      js_toggleBgMusic(true);
    );
    if(hotspot[get(embed_video_name)].sound_pause == 1 AND hotspot[get(embed_video_name)].ispaused == false AND need_pause_bg_music_sound == false,
      js_toggleBgVoice(true);
    );

    set(pano_id,%1);
    copy(scene_name, pano_id);
    set(blend_mode_name, 'blend');
    txtadd(blend_mode_name, %3);
    set(blend_mode, get(blendmodes[get(blend_mode_name)].blend));
    if(blend_mode === null,
      copy(blend_mode,blendmodes[blend0].blend);
    );
    if(%2 == 1 ,
      set(needKeepview, true);
      copy(needKeepviewHlookat, view.hlookat);
      copy(needKeepviewVlookat, view.vlookat);
      copy(needKeepviewFov, view.fov);
      loadscene(get(pano_id),null,KEEPVIEW|MERGE,get(blend_mode));
      ,
      set(needKeepview, false);
      loadscene(get(pano_id),null,MERGE,get(blend_mode));
      set(view.hlookat,get(config.panos.pano[get(xml.scene)].view.hlookat));
      set(view.vlookat,get(config.panos.pano[get(xml.scene)].view.vlookat));
      set(view.fov,get(config.panos.pano[get(xml.scene)].view.fov));
    );

    copy(blend_mode,blendmodes[blend0].blend);
    ,
    lookto(get(config.panos.pano[get(xml.scene)].view.hlookat), get(config.panos.pano[get(xml.scene)].view.vlookat), get(config.panos.pano[get(xml.scene)].view.fov));
  );
  if(is_setup_start_pano === null,
    setup_start_pano();
    set(is_setup_start_pano, true);
  );
</action>
	<action name="setup_vr">
		copy(vr_plugin_url,plugin_url.WEBVR_JS);
		copy(plugin[WebVR].url, vr_plugin_url);

		set(webvr_text_noDistortion, '无畸变');
		set(webvr_text_webvrSetup, 'WebVR 设置');
		set(webvr_text_mobilevrSetup, 'MobileVR 设置');
		set(webvr_text_screensize, '屏幕尺寸（英寸）:');
		set(webvr_text_vrheadset, 'VR 头显预设');
		set(webvr_text_customizeHeadset, '自定义头显');
		set(webvr_text_adjustmentInVR, '在 VR 中进行调整');
		set(webvr_text_close, '关闭');
		set(webvr_text_preset, '预设：');
		set(webvr_text_fov, 'FOV');
		set(webvr_text_interLensDistance, '内镜距离（mm）:');
		set(webvr_text_screenToLensDistance, '屏幕到镜头距离（mm）:');
		set(webvr_text_trayToLensCenterDistance, '头显到镜头中央的距离（mm）:');
		set(webvr_text_lensDistortion, '镜头畸变系数：');
		set(webvr_text_oversampling, '过采样：');
		
	</action>
	<action name="disable_vr">
		set(layer[vr_layer].visible,false);
		js_vrUnavailableCallback();
	</action>
	<action name="turn_on_vr">
		webvr.entervr();
	</action>
	<action name="turn_off_vr">
		webvr.exitvr();
	</action>

	<action name="hide_vr_hotspot">
	if(webvr.isenabled == true,
	  copy(hotspotCount,hotspot.count);
	  for(set(i,0),i LT hotspotCount,inc(i),
			if(hotspot[get(i)].image_type == 2 AND hotspot[get(i)].isActiveHotspot == true,
				set(hotspot[get(i)].renderer,webgl);
			);
			if(hotspot[get(i)].hotspot_type != 0 AND hotspot[get(i)].isActiveHotspot == true,
				set(hotspot[get(i)].visible,false);
				,
				if(hotspot[get(i)].hotspot_type == 0 AND hotspot[get(i)].is_hotspot_txt != true AND device.mobilevr,
					set(hotspot[get(i)].scale,0.25);
				);
				if(hotspot[get(i)].hotspot_type == 0 AND hotspot[get(i)].is_hotspot_txt == true AND device.mobilevr,
					set(hotspot[get(i)].scale,0.5);
				);
			);
		);
      set(embedCount,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
	  for(set(i,0),i LT embedCount,inc(i),
			set(embedName,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));
			set(hotspot[get(embedName)].visible,false);
		);
	);
</action>


<action name="show_vr_hotspot">
  copy(hotspotCount,hotspot.count);
  for(set(i,0),i LT hotspotCount,inc(i),
		if(hotspot[get(i)].isActiveHotspot == true,
		  set(hotspot[get(i)].visible,true);
		if(hotspot[get(i)].image_type == 2 AND hotspot[get(i)].html === null,
			set(hotspot[get(i)].renderer,"css3d");
		);
		if(hotspot[get(i)].hotspot_type != 0 AND hotspot[get(i)].isActiveHotspot == true,
			set(hotspot[get(i)].visible,true);
			,
			if(hotspot[get(i)].hotspot_type == 0 AND hotspot[get(i)].is_hotspot_txt != true AND device.mobilevr,
				set(hotspot[get(i)].scale,0.5);
			);
			if(hotspot[get(i)].hotspot_type == 0 AND hotspot[get(i)].is_hotspot_txt == true AND device.mobilevr,
				set(hotspot[get(i)].scale,1);
			);
		);
    );
  );
  set(embedCount,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
  for(set(i,0),i LT embedCount,inc(i),
    set(embedName,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));
    set(hotspot[get(embedName)].visible,true);
  );
</action>

	

	
	<plugin name="webvr" devices="html5" keep="true"
	        url=""
	        mobilevr_support="true"
	        mobilevr_touch_support="true"
	        mobilevr_fake_support="true"
	        mobilevr_profile.normal="90|60|42|0|0|0"
	        mobilevr_profile.mobile="80|60|42|35|0.441|0.156"
	        mobilevr_wakelock="true"
	        fullscreen_mirroring="false"
	        mouse_pointerlock="true"
	        vr_cursor_onover="if(handcursor, tween(hotspot[vr_cursor].scale,0.4,0.1); vr_auto_click(get(vr_timeout)); );"
	        vr_cursor_onout="tween(hotspot[vr_cursor].scale,0.3,0.1);"
	        onavailable="webvr_onavailable();"
	        onunavailable=""
	        onunknowndevice="webvr_onunknowndevice();"
	        onvrcontrollers="webvr_onvrcontrollers();"
	        onentervr="webvr_onentervr();"
	        onexitvr="webvr_onexitvr();"
			onloaded="copy(webvr, plugin[WebVR]);"
	        />



	
	<style name="vr_cursor_style" 
		url="calc:settings.skin_url + 'skin/webvr_cursor_80x80_17f.png'"
		visible="false"
		enabled="false"
		distorted="true"
		crop="0|0|80|80"
		scale="0.3"
		depth="120"
		/>
	
	<action name="webvr_load_vr_cursor_hs" scope="local">
		addhotspot('vr_cursor', hs);
		hs.loadstyle(vr_cursor_style);
		set(hs.keep, true);
		set(webvr.vr_cursor, 'hotspot[vr_cursor]');
	</action>
	
	<action name="webvr_load_vr_controller_hs" scope="private:VRCONTROLLERS" args="controllerstyle">
		removehotspot('vr_controller_l');
		removehotspot('vr_controller_r');
		addhotspot('vr_controller_l', vr_ctrl_l);
		addhotspot('vr_controller_r', vr_ctrl_r);
		set(vr_ctrl_l.keep, true);
		set(vr_ctrl_r.keep, true);
		vr_ctrl_l.loadstyle(calc(controllerstyle ? controllerstyle : 'vrcontroller_light_and_point'));
		vr_ctrl_r.loadstyle(calc(controllerstyle ? controllerstyle : 'vrcontroller_light_and_point'));

		
		vr_ctrl_l.addevent('onvrcontrollerbutton', 'if(vrbuttonindex == 3 AND vrbuttonstate == "up", vrsetup_open(); );' );
		vr_ctrl_r.addevent('onvrcontrollerbutton', 'if(vrbuttonindex == 3 AND vrbuttonstate == "up", vrsetup_open(); );' );
		
		set(global.webvr.vr_controller, 'vr_controller_l,vr_controller_r');
		set(global.have_vr_controllers, true);
		
		if(global.webvr.isvrbrowser AND global.webvr.vrcontrollers[0].buttons.length LE 2,
			
			addhotspot('webvr_vrsetup', vr_setup_hs);
			vr_setup_hs.loadstyle('webvr_button_style');
			set(vr_setup_hs, keep=true, ath=0, atv=90, depth=160, zorder=999, torigin=view, html='VR SETUP', oversampling=3, scale=0.2, onclick='vrsetup_open();', onloaded='renderloop( copy(ath,view.hlookat); );');
		);
	</action>
	
	<action name="webvr_onvrcontrollers" scope="private:VRCONTROLLERS">
		if(!global.have_vr_controllers, webvr_load_vr_controller_hs(); );
	</action>
		
	<style name="vrcontroller_laser" 
			url="calc:settings.skin_url + 'skin/webvr_laser.png'"
			distorted="true"
			enabled="false"
			visible="false"
			width="0.5" height="1000" edge="bottom" oref="1" oy="0"
			torigin="world" tx="0" ty="0" tz="0" depth="0"
			zorder="99999"
			depthbuffer="true"
			onloaded="asyncloop(loaded, 
				calc(height, (target AND target.hitd GT 0 ? target.hitd : 1000) / display.hotspotworldscale); 
				);"
			/>
			
	<style name="vrcontroller_light_and_point" 
			url="calc:settings.skin_url + 'skin/webvr_light.png'"
			distorted="true"
			enabled="false"
			visible="false"
			width="0.5" height="18" edge="bottom" oref="1" oy="0"
			torigin="world" tx="0" ty="0" tz="0" depth="0"
			zorder="99999"
			depthbuffer="true"
			onloaded="vrcontroller_target_point();"
			/>
	
	<style name="vrcontroller_handcursor_and_point" 
			url="calc:settings.skin_url + 'skin/webvr_handcursor.png'"
			distorted="true"
			enabled="false"
			visible="false"
			width="10" height="10" edge="center" oref="1" oy="-1"
			torigin="world" tx="0" ty="0" tz="0" depth="0"
			zorder="99999"
			depthbuffer="true"
			onloaded="vrcontroller_target_point();"
			/>
	
	<action name="vrcontroller_target_point" scope="localonly">
		addhotspot(auto, hs);
		set(hs, keep=true, type=text, bgcolor=0xFFFFFF, bgalpha=1.0, width=10, height=10, bgroundedge=5, bgborder='1 0x000000 1.0', oversampling=2,
			scale=0.4, torigin=world, depth=0, distorted=false, zoom=true, zorder=99998, enabled=false
		  );
		renderloop(
			if(!caller.loaded,
				removehotspot(get(hs.name));
				stoprenderloop();
			  ,
				if(global.display.havedepthmap,
					
					removehotspot(get(hs.name));
					stoprenderloop();
					webvr_load_vr_controller_hs('vrcontroller_laser');
				  ,
					calc(hs.bgcolor, caller.pressed ? 0x049AFF : (caller.hovering ? 0x00FF00 : 0xFFFFFF));
					calc(distance, (caller.target AND caller.target.hitd GT 0 ? caller.target.hitd : 1000));
					calc(hs.scale, 0.4 * (distance GT 1000 ? distance / 1000 : (distance LT 200 ? 0.25 : (0.25 + (distance - 200)/800 * 0.75))));
					calc(hs.tx, caller.tx + caller.dx * distance);
					calc(hs.ty, caller.ty + caller.dy * distance);
					calc(hs.tz, caller.tz + caller.dz * distance);
				);
			);
		);
	</action>
	



	
	<action name="vr_auto_click" scope="local" args="vr_aclk_timeout">
		if(webvr.isenabled,
			if(vr_aclk_timeout == null, set(vr_aclk_timeout, 2000));
			copy(vr_aclk_t1, timertick);
			set(vr_aclk_waiting, true);
			copy(webvr.vr_aclk_hotspot, caller.name);
			set(hotspot[vr_cursor].crop,'0|0|80|80');

			asyncloop(vr_aclk_waiting AND webvr.vr_aclk_hotspot == caller.name,
				sub(dt, timertick, vr_aclk_t1);

				if(!caller.hovering,
					set(vr_aclk_waiting, false);
					set(hotspot[vr_cursor].crop,'0|0|80|80');
				  ,
					div(f, dt, vr_aclk_timeout);
					mul(f, 16);
					roundval(f);
					Math.min(f, 16);
					mul(f, 80);

					txtadd(hotspot[vr_cursor].crop,get(f),'|0|80|80');

					
					sub(dt, 100);
					if(dt GT vr_aclk_timeout,
						set(vr_aclk_waiting,false);
						set(hotspot[vr_cursor].crop,'0|0|80|80');
						
						callwith(caller, scope(global, ondown();onup();onclick(); ); );
					);
				);
			);
		);
	</action>


	
	<events name="webvr_events" devices="html5" keep="true"
	        onmousedown="if(webvr AND webvr.isenabled, webvr_showbuttons() );"
	        />



	
	<action name="webvr_onavailable">
		webvr.loadsettings();
		jsget(needUpdateVRSettings,'krpCallbackObject');
		if(needUpdateVRSettings !== null,
		delayedcall(3,
			jscall('krpCallbackObject.krpUpdateVRSettingCallback();');
		);
		);
	</action>
	
	
	<action name="webvr_onunknowndevice">
		if(webvr.isfake AND device.desktop AND webvr.havesettings == false,
			
			set(webvr.mobilevr_lens_overlap, 1.0);
			set(webvr.mobilevr_lens_fov, 96.0);
			set(webvr.mobilevr_lens_dist, 0.0);
			set(webvr.mobilevr_lens_dist2, '1|0|0|0');
			set(webvr.mobilevr_lens_ca, 0.0);
			set(webvr.mobilevr_lens_vign, 100);
		  );
	</action>


	<action name="webvr_onentervr">

		webvr_showbuttons();
		webvr_hide_all_non_vr_layers();

		if(webvr.isfake, webvr_show_fakemode_info(true); );
		
		webvr_load_vr_cursor_hs();
		hide_UI();
		hide_vr_hotspot();
	</action>


	<action name="webvr_onexitvr">
		removehotspot('vr_cursor');
		removehotspot('vr_controller_l');
		removehotspot('vr_controller_r');
		set(have_vr_controllers, false);

		stopdelayedcall(vr_button_fadeout);

		tween(layer[webvr_exitbutton].alpha,0);
		tween(layer[webvr_setupbutton].alpha,0);

		webvr_show_fakemode_info(false);

		webvr_restore_layers();

		show_vr_hotspot();
		show_UI();
		if(plugin[snow] !== null,
		set(plugin[snow].visible, true);
		);
		resume_embed_video();
		js_exitVRCallback();
	</action>


	<action name="webvr_hide_all_non_vr_layers" scope="local">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr !== true,
				copy(lr.vr_backup_visible, lr.visible);
				set(lr.visible, false);
			);
		);
	</action>

	<action name="webvr_restore_layers" scope="local">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr_backup_visible,
				copy(lr.visible, lr.vr_backup_visible);
				delete(lr.vr_backup_visible);
			);
		);
	</action>
	
	<action name="webvr_show_fakemode_info" scope="local" args="show">
		if(show == true,
			addlayer(webvr_fakemode_info);
			set(layer[webvr_fakemode_info],
				type='text',
				keep=true,
				align='bottom',
				y=80,
				bg=false,
				css='color:#FFFFFF;text-align:center;',
				html='[i][u]Simulated WebVR Mode![/u][br]For real WebVR with headset tracking use a [a href="http://webvr.info" target="_blank" style="color:#FFFFFF;"]WebVR-capable[/a] browser or a mobile device and a VR headset.[/i]'
			);
		  ,
			removelayer(webvr_fakemode_info);
		);
	</action>
	
	
	
	<krpano webvr_setup_scale="calc:(1.0 + 1.0*(device.mobile AND stagescale LT 1.0)) / (1.0 + 1.0*device.mobile)"
	        webvr_button_scale.normal="1.0"
	        webvr_button_scale.mobile="1.6"
	        />

	
	
	<style name="webvr_button_style"
	       type="text"
	       bgcolor="0x000000"
	       bgalpha="0.5"
	       bgroundedge="0"
	       css="calc:'color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
	       padding="calc:6*webvr_setup_scale*webvr_button_scale + ' ' + 10*webvr_setup_scale*webvr_button_scale"
	       />
	

	<layer name="webvr_exitbutton" keep="true" vr="true"
	       style="webvr_button_style"
	       html="退出 VR"
	       align="top" y="24"
	       autoalpha="true" alpha="0.0"
	       onclick="webvr.exitVR();"
	       />

	<layer name="webvr_setupbutton" keep="true" vr="true"
	       style="webvr_button_style"
	       html="VR 设置"
	       align="bottom" y="110"
	       autoalpha="true" alpha="0.0"
	       onclick="vrsetup_open();"
	       />


	<action name="webvr_showbuttons">
		stopdelayedcall(vr_button_fadeout);
		tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 1.0|1.0, 0.25);
		delayedcall(vr_button_fadeout, 3.0, tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 0.0|0.0, 1.0); );
	</action>

	
		
	
	
	
	<mobilevr_presets>
		<headset name="cbv1" caption="Cardboard V1"  profile="80|60|42|35|0.441|0.156" />
		<headset name="cbv2" caption="Cardboard V2"  profile="120|64|39|35|0.34|0.55" />
		<headset name="dydm" caption="Daydream"      profile="104|60|41|35|0.42|0.51" />
		<headset name="nodt" caption="无畸变" profile="90|60|42|0|0|0" />
		<headset name="pico" caption="Pico" 		 profile="92|62.5|42|0|0|0" />
	</mobilevr_presets>

	<action name="vrsetup_open">
		if(!vrsetup_open_js, vrsetup_init(); );
		vrsetup_open_js();
	</action>
		

	<action name="vrsetup_init" type="Javascript"><![CDATA[
		
		var webvr = krpano.webvr;
		var padding = 20;
		
		function vrsetup_dlg_create(type)
		{
			var dlg = {type:type, bg:null, y:0, scale:1, elements:[]};
		
			if (type == 'layer')
			{
				dlg.bg = krpano.addlayer();
				dlg.bg.keep = true;
				dlg.bg.type = 'container';
				dlg.bg.align = 'center';
			}
			else	// 'hotspot'
			{
				dlg.scale = 0.15;
				dlg.bg = krpano.addhotspot();
				dlg.bg.keep = true;
				dlg.bg.type = 'text';
				dlg.bg.distorted = true;
				dlg.bg.ath = krpano.view.hlookat;
				dlg.bg.atv = 0;
				dlg.bg.depth = 150;
				dlg.bg.torigin = 'world';
				dlg.bg.tx = krpano.view.tx;
				dlg.bg.ty = krpano.view.ty;
				dlg.bg.tz = krpano.view.tz;
			}
			
			dlg.bg.bgcolor = 0x000000;
			dlg.bg.bgalpha = 0.5;
			dlg.bg.bgcapture = true;
			dlg.bg.handcursor = false;
			dlg.bg.capture = false;
			dlg.bg.zorder = 100;
			dlg.bg.visible = false;
			
			dlg.y = 0;
			
			return dlg;
		}
		
		function vrsetup_dlg_addline(dlg, linetext, customcss, onclick)
		{
			var txt;
			
			if (dlg.type == 'layer')
			{
				txt = krpano.addlayer();
				txt.keep = true;
				txt.type = 'text';
				txt.align = 'center';
				txt.zorder = 101;
			}
			else	// 'hotspot'
			{
				txt = krpano.addhotspot();
				txt.keep = true;
				txt.type = 'text';
				txt.distorted = true;
				txt.zorder = 101;
				txt.ath = dlg.bg.ath;
				txt.atv = dlg.bg.atv;
				txt.depth = dlg.bg.depth - 1;
				txt.oversampling = 2;
				txt.scale = dlg.scale;
				txt.torigin = dlg.bg.torigin;
				txt.tx = dlg.bg.tx;
				txt.ty = dlg.bg.ty;
				txt.tz = dlg.bg.tz;
			}
			
			txt.onautosized = function()
			{
				txt.havesize = true;
			}
			
			txt.edge = 'top';
			txt.visible = false;
			txt.bg = false;
			txt.html = "" + linetext;
			txt.css = 'font-size:32px;font-weight:bold;color:#FFFFFF; line-height:90%;' + (customcss || '');
			
			if (onclick)
			{
				txt.onclick = onclick;
			}
			else
			{
				txt.enabled = false;
			}
			
			dlg.elements.push( txt );
			
			return txt;
		}
		
		function vrsetup_dlg_addctrl(dlg, changedelay, callback)
		{
			var txt = vrsetup_dlg_addline(dlg, callback(0) );
			
			var inc;
			var dec;
			
			if(dlg.type == 'layer')
			{
				inc = krpano.addlayer();
				inc.keep = true;
				inc.type = 'text';
				inc.align = 'center';
				inc.zorder = 101;
				
				dec = krpano.addlayer();
				dec.keep = true;
				dec.type = 'text';
				dec.align = 'center';
				dec.zorder = 101;
			}
			else	// 'hotspot'
			{
				inc = krpano.addhotspot();
				inc.keep = true;
				inc.type = 'text';
				inc.distorted = true;
				inc.zorder = 101;
				inc.ath = dlg.bg.ath;
				inc.atv = dlg.bg.atv;
				inc.depth = dlg.bg.depth - 1;
				inc.oversampling = 2;
				inc.scale = dlg.scale;
				inc.torigin = dlg.bg.torigin;
				inc.tx = dlg.bg.tx;
				inc.ty = dlg.bg.ty;
				inc.tz = dlg.bg.tz;
				
				dec = krpano.addhotspot();
				dec.keep = true;
				dec.type = 'text';
				dec.distorted = true;
				dec.zorder = 101;
				dec.ath = dlg.bg.ath;
				dec.atv = dlg.bg.atv;
				dec.depth = dlg.bg.depth - 1;
				dec.oversampling = 2;
				dec.scale = dlg.scale;
				dec.torigin = dlg.bg.torigin;
				dec.tx = dlg.bg.tx;
				dec.ty = dlg.bg.ty;
				dec.tz = dlg.bg.tz;
			}
			
			inc.edge = 'top';
			inc.visible = false;
			inc.bg = false;
			inc.html = '&#62;';
			inc.css = 'font-size:32px;font-weight:bold;color:#FFFFFF; line-height:90%;';
			inc.padding = '0 10';
					
			dec.edge = 'top';
			dec.visible = false;
			dec.bg = false;
			dec.html = '&#60;';
			dec.css = 'font-size:32px;font-weight:bold;color:#FFFFFF; line-height:90%;';
			dec.padding = '0 10';
			
			inc.vr_timeout = changedelay * 1000;
			dec.vr_timeout = changedelay * 1000;
			inc.ondown = function(){ txt.html = ""+callback(+1); inc.enabled = false; setTimeout(function(){ inc.enabled = true; },0); };
			dec.ondown = function(){ txt.html = ""+callback(-1); dec.enabled = false; setTimeout(function(){ dec.enabled = true; },0); };
			
			txt.ctrlchilds = [inc,dec];
			
			txt.updateControl = function()
			{
				txt.html = callback(0);
			}
			
			return txt;
		}
		
		function vrsetup_dlg_addspace(dlg, customspace)
		{
			dlg.elements.push(customspace|| padding);
		}
		
		function vrsetup_dlg_finish(dlg)
		{
			var i, w=0, h=0;
			var waitforsizes=false;
			
			for (i=0; i < dlg.elements.length; i++)
			{
				var e = dlg.elements[i];
				if ( isNaN(e) )
				{
					if ( e.havesize )
					{
						w = Math.max( w, e.width * 1);
						h += e.height * 1;
					}
					else
					{
						waitforsizes = true;
						break;
					}
				}
				else
				{
					h += e;
				}
			}
			
			if (waitforsizes)
			{
				setTimeout( function(){ vrsetup_dlg_finish(dlg); }, 16 ); 
			}
			else
			{
				var y = 0;
				
				dlg.bg.width = Math.ceil((w + padding*2)*dlg.scale);
				dlg.bg.height = Math.ceil((h + padding*2)*dlg.scale);
					
				for (i=0; i < dlg.elements.length; i++)
				{
					var e = dlg.elements[i];
					if ( isNaN(e) )
					{
						e.oy = Math.round((-h/2 + y) * dlg.scale);
						e.visible = true;
						
						y += e.height * 1;
						
						if (e.ctrlchilds )
						{
							for (var j=0; j < e.ctrlchilds.length; j++)
							{
								var sube = e.ctrlchilds[j];
								sube.ox = Math.round(((j&1)-0.5) * (-w) * dlg.scale);
								sube.oy = e.oy;
								sube.visible = true;
							}
						}
					}
					else
					{
						y += e;
					}
				}
				
				dlg.bg.visible = true;
			}
		}
		
		function vrsetup_dlg_remove(dlg)
		{
			var removefu = dlg.type == 'layer' ? krpano.removelayer : krpano.removehotspot;
			
			var i,j;
			for (i=0; i < dlg.elements.length; i++)
			{
				var e = dlg.elements[i];
				if ( isNaN(e) )
				{
					if (e.ctrlchilds )
					{
						for (j=0; j < e.ctrlchilds.length; j++)
						{
							var sube = e.ctrlchilds[j];
							removefu(sube.name);
						}
					}
					
					removefu(e.name);
				}
			}
			
			removefu(dlg.bg.name);
		}
		
		
		function vrsetup_webvr_dialog()
		{
			// WebVR API rendering
			var dlg = vrsetup_dlg_create('hotspot');
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_webvrSetup"));
			vrsetup_dlg_addspace(dlg);
			
			vrsetup_dlg_addline(dlg, 'Oversampling:', 'font-size:16px;')
			var ctrl_ss = vrsetup_dlg_addctrl(dlg, 1.0, function(change)
			{
				var p = webvr.oversampling;
				
				if (change < 0) { p = Math.max(0.2, Number(p) - 0.1); webvr.oversampling = p;  } else 
				if (change > 0) { p = Math.min(4.0, Number(p) + 0.1); webvr.oversampling = p;  }
				
				krpano.actions.delayedcall(0, function()
				{
					var gl = krpano.webGL.context;
					var gl_width  = gl.drawingBufferWidth  | 0;
					var gl_height = gl.drawingBufferHeight | 0;
					
					renderres.html = gl_width + "x" + gl_height;
				});
				
				return p.toFixed(1);
			});
			vrsetup_dlg_addspace(dlg,8);
			vrsetup_dlg_addline(dlg, 'Rendering Resolution:', 'font-size:16px;');
			var renderres = vrsetup_dlg_addline(dlg, '');
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, 'CLOSE', '', vrsetup_close);
			vrsetup_dlg_finish(dlg);
			
			return dlg;
		}
		
		function vrsetup_mobilevr_dialog()
		{
			// MobileVR / Cardboard rendering
			var dlg = vrsetup_dlg_create(0 ? 'hotspot' : 'layer');
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_mobilevrSetup"));
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_screensize"), 'font-size:16px;')
			vrsetup_dlg_addctrl(dlg, 1.0, function(change){ var ss = Number(webvr.mobilevr_screensize); if (isNaN(ss)) ss = 5.0; if (change < 0) { ss = Math.max(4.0, ss - 0.1); webvr.mobilevr_screensize = ss; } else if (change > 0) { ss = Math.min(10.0, ss + 0.1); webvr.mobilevr_screensize = ss; } return ss.toFixed(1); });
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_vrheadset"), 'font-size:16px;')
			var ctrl_ps = vrsetup_dlg_addctrl(dlg, 1.0, function(change)
			{
				var preset_index = -1;
				var i;
				
				var profile = webvr.mobilevr_profile;
				var presets = krpano.get("mobilevr_presets.headset");
				if (presets)
				{
					presets = presets.getArray();
					
					for (i=0; i < presets.length; i++)
					{
						if ( profile == presets[i].profile )
						{
							preset_index = i;
							break;
						}
					}
					
					if (change < 0)
					{
						preset_index--;
						if (preset_index < 0)
							preset_index = presets.length - 1;
								
						webvr.mobilevr_profile = presets[preset_index].profile;
					}
					else if (change > 0)
					{
						preset_index++;
						if (preset_index >= presets.length)
							preset_index = 0;
						
						webvr.mobilevr_profile = presets[preset_index].profile;
					}
				}
					
				if (preset_index >= 0)
				{
					return presets[preset_index].caption;
				}
				
				return 'Custom';
			});
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_customizeHeadset"), 'font-size:25px;', function()
			{
				vrsetup_dlg_remove(dlg); 
				dlg=null; 
				
				vrsetup_dialog = vrsetup_mobilevr_interactive_dialog();
				
			});
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_adjustmentInVR"), 'font-size:12px;');
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_close"), '', vrsetup_close);
			vrsetup_dlg_finish(dlg);
			
			return dlg;
		}
		
		function vrsetup_mobilevr_interactive_dialog()
		{
			// MobileVR / Cardboard rendering
			var ctrl_preset, ctrl_fov, ctrl_ild, ctrl_stl, ctrl_ttl, ctrl_k1, ctrl_k2, ctrl_os;
			
			var dlg = vrsetup_dlg_create('hotspot');
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_mobilevrSetup"));
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_preset"), 'font-size:16px;')
			
			ctrl_preset = vrsetup_dlg_addctrl(dlg, 1.0, function(change)
			{
				var preset_index = -1;
				var i;
				
				var profile = webvr.mobilevr_profile;
				var presets = krpano.get("mobilevr_presets.headset");
				if (presets)
				{
					presets = presets.getArray();
					
					for (i=0; i < presets.length; i++)
					{
						if ( profile == presets[i].profile )
						{
							preset_index = i;
							break;
						}
					}
					
					if (change < 0)
					{
						preset_index--;
						if (preset_index < 0)
							preset_index = presets.length - 1;
								
						webvr.mobilevr_profile = presets[preset_index].profile;
					}
					else if (change > 0)
					{
						preset_index++;
						if (preset_index >= presets.length)
							preset_index = 0;
						
						webvr.mobilevr_profile = presets[preset_index].profile;
					}
					
					if (change != 0)
					{
						ctrl_fov.updateControl();
						ctrl_ild.updateControl();
						ctrl_stl.updateControl();
						if (ctrl_ttl) ctrl_ttl.updateControl();
						ctrl_k1.updateControl();
						ctrl_k2.updateControl();
					}
				}
			
				if (preset_index >= 0)
				{
					return presets[preset_index].caption;
				}
				
				return 'Custom';
			});
			
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_fov"), 'font-size:16px;');
			ctrl_fov = vrsetup_dlg_addctrl(dlg, 0.25, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[0] = Number(p[0]) - 1.0; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[0] = Number(p[0]) + 1.0; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[0]).toFixed(0); });
			vrsetup_dlg_addspace(dlg, 8);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_interLensDistance"), 'font-size:16px;');
			ctrl_ild = vrsetup_dlg_addctrl(dlg, 0.25, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[1] = Number(p[1]) - 1.0; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[1] = Number(p[1]) + 1.0; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[1]).toFixed(0); });
			vrsetup_dlg_addspace(dlg, 8);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_screenToLensDistance"), 'font-size:16px;');
			ctrl_stl = vrsetup_dlg_addctrl(dlg, 0.25, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[2] = Number(p[2]) - 1.0; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[2] = Number(p[2]) + 1.0; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[2]).toFixed(0); });
			vrsetup_dlg_addspace(dlg, 8);
			if (!webvr.isfake)
			{
				vrsetup_dlg_addline(dlg, krpano.get("webvr_text_trayToLensCenterDistance"), 'font-size:16px;');
				ctrl_ttl = vrsetup_dlg_addctrl(dlg, 0.25, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[3] = Number(p[3]) - 1.0; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[3] = Number(p[3]) + 1.0; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[3]).toFixed(0); });
				vrsetup_dlg_addspace(dlg, 8);
			}
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_lensDistortion"), 'font-size:16px;');
			ctrl_k1 = vrsetup_dlg_addctrl(dlg, 0.1, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[4] = Number(p[4]) - 0.01; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[4] = Number(p[4]) + 0.01; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[4]).toFixed(3); });
			ctrl_k2 = vrsetup_dlg_addctrl(dlg, 0.1, function(change){ var p = webvr.mobilevr_profile.split("|"); if (change < 0) { p[5] = Number(p[5]) - 0.01; webvr.mobilevr_profile = p.join("|"); } else if (change > 0) { p[5] = Number(p[5]) + 0.01; webvr.mobilevr_profile = p.join("|"); } if (change != 0) ctrl_preset.updateControl(); return Number(p[5]).toFixed(3); });
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_oversampling"), 'font-size:16px;');
			ctrl_os = vrsetup_dlg_addctrl(dlg, 0.25, function(change){ var p = webvr.oversampling; if (change < 0) { p = Math.max(0.2, Number(p) - 0.1); webvr.oversampling = p;  } else if (change > 0) { p = Math.min(4.0, Number(p) + 0.1); webvr.oversampling = p;  } return p.toFixed(1); });
			vrsetup_dlg_addspace(dlg);
			vrsetup_dlg_addline(dlg, krpano.get("webvr_text_close"), '', vrsetup_close);
			vrsetup_dlg_finish(dlg);
			
			return dlg;
		}
		
		var vrsetup_dialog = null;
		var vrsetup_events = null;
		
		function vrsetup_close()
		{
			if (vrsetup_dialog)
			{
				webvr.savesettings();
			
				vrsetup_dlg_remove(vrsetup_dialog); 
				vrsetup_dialog = null;
			}
		
			if (vrsetup_events)
			{
				krpano.events.removeItem(vrsetup_events.name);
				vrsetup_events = null;
			}
		}
		
		krpano.vrsetup_close = function()
		{
			vrsetup_close();
		}
		
		krpano.vrsetup_open_js = function()
		{
			if (vrsetup_dialog != null)
			{
				// already open...
				return;
			}
				
			if (webvr.iswebvr)
			{
				vrsetup_dialog = vrsetup_webvr_dialog();
			}
			else
			{
				vrsetup_dialog = vrsetup_mobilevr_dialog();
			}
			
			vrsetup_events = krpano.events.createItem("auto");
			vrsetup_events.keep = true;
			
			vrsetup_events.webvr_onexitvr = function()
			{
				vrsetup_close();
			}
		}
		
	]]></action>
	

	
	<mobilevr_device_database>
		<device name="iPhone 5/5S/SE" screen="320x568x2" size="4.0" bevel="3" />
		<device name="iPhone 6/6S/7/8" screen="375x667x2" size="4.7" />
		<device name="iPhone 6/6S/7/8 Plus" screen="414x736" size="5.5" />
		<device name="iPhone 6/6S/7/8 Plus (zoomed)" screen="375x667x3" size="5.5" />
		<device name="iPhone X/XS/11Pro" screen="375x812x3" size="5.85|5.33" />
		<device name="iPhone XS/11Pro Max" screen="414x896x3" size="6.46|5.95" />
		<device name="iPhone XR/11" screen="414x896x2" size="6.06|5.58" />
		<device name="Samsung S6" ua="sm-g930" size="5.1" />
		<device name="Samsung S6 Edge" ua="sm-g925" size="5.1" />
		<device name="Samsung S6 Edge Plus" ua="sm-g928" size="5.7" />
		<device name="Samsung S7" ua="sm-g930" size="5.1" />
		<device name="Samsung S7 Edge" ua="sm-g935" size="5.5" />
		<device name="Samsung S8" ua="sm-g950" size="5.8" />
		<device name="Samsung S8+" ua="sm-g955" size="6.2" />
		<device name="Samsung S9" ua="sm-g960" size="5.8" />
		<device name="Samsung S9+" ua="sm-g965" size="6.2" />
		<device name="Samsung S10e" ua="sm-g970" size="5.8" />
		<device name="Samsung S10" ua="sm-g973" size="6.1" />
		<device name="Samsung S10+" ua="sm-g975" size="6.4" />
		<device name="Samsung S10 5G" ua="sm-g977" size="6.7" />
		<device name="Samsung Note 7" ua="sm-n930" size="5.7" />
		<device name="Samsung Note 8" ua="sm-n950" size="6.3" />
		<device name="Samsung Note 9" ua="sm-n960" size="6.4" />
		<device name="Samsung Note 10" ua="sm-n970" size="6.3" />
		<device name="Samsung Note 10 5G" ua="sm-n971" size="6.3" />
		<device name="Samsung Note 10+" ua="sm-n975" size="6.8" />
		<device name="Samsung Note 10+ 5G" ua="sm-n976" size="6.8" />
		<device name="Huawei P10 Lite" ua="HUAWEIWAS-TL10" size="5.2" />
		<device name="Huawei P20 Lite" ua="HUAWEIANE-LX1" size="5.84" />
	</mobilevr_device_database>

<action name="setup_weather">

  if(config.panos.pano[get(scene_name)].sun.id !== null,
    add_sun(get(config.panos.pano[get(scene_name)].sun.ath),get(config.panos.pano[get(scene_name)].sun.atv));
  );

  if(config.panos.pano[get(scene_name)].weather.id !== null AND config.panos.pano[get(scene_name)].weather.id != -1,
    if(config.panos.pano[get(scene_name)].weather.id == 0,
      add_snow(get(config.panos.pano[get(scene_name)].weather.size));
      ,
      if(config.panos.pano[get(scene_name)].weather.id == 1,
        add_rain(get(config.panos.pano[get(scene_name)].weather.size));
        ,
        if(config.panos.pano[get(scene_name)].weather.id == 2,
          add_sun(get(config.panos.pano[get(scene_name)].weather.ath),get(config.panos.pano[get(scene_name)].weather.atv));
          ,
          if(config.panos.pano[get(scene_name)].weather.id == 3,
            if(config.panos.pano[get(scene_name)].weather.type == 1,
              add_image_rain(get(settings.weather_image_1), get(config.panos.pano[get(scene_name)].weather.size));
              ,
              if(config.panos.pano[get(scene_name)].weather.type == 2,
                add_image_rain(get(settings.weather_image_2), get(config.panos.pano[get(scene_name)].weather.size));
                ,
                add_image_rain(get(settings.weather_image_3), get(config.panos.pano[get(scene_name)].weather.size));
              );
            );
            ,
            copy(custom_weather_url,config.panos.pano[get(scene_name)].weather.url);
            txtadd(custom_weather_url,'?imageView2/0/w/512/h/512');
            add_image_rain(get(custom_weather_url), get(config.panos.pano[get(scene_name)].weather.size));
          );
        );
      );
    );
  );

  if(webvr.isenabled AND plugin[snow] !== null,
    set(plugin[snow].visible, false);
  );
</action>
<action name="add_sun">
  
  addlensflare("obj",true);
  set(lensflares[obj].keep,false);
  set(lensflares[obj].visible,true);
  set(lensflares[obj].device,html5);
  set(lensflares[obj].item[flareobj].ath,%1);
  set(lensflares[obj].item[flareobj].atv,%2);
  set(lensflares[obj].item[flareobj].scene,get(xml.scene));
  set(lensflares[obj].item[flareobj].typ,blinkstyle1);
  set(lensflares[obj].item[flareobj].dust_effect,false);
  set(lensflares[obj].item[flareobj].keep,false);
</action>
<action name="add_rain">

  if(%1 === null,
    set(rain_size, 2);
    ,
    set(rain_size, %1);
  );

  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    copy(plugin[snow].imageurl,      settings.rain_image);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        1000);
    mul(plugin[snow].flakes,        rain_size);
    set(plugin[snow].color,         0xefe3e4);
    set(plugin[snow].speed,         15.5);
    set(plugin[snow].shake,         1.0);
    set(plugin[snow].speedvariance, 1.0);
    set(plugin[snow].spreading,     2.0);
    set(plugin[snow].rainwidth,     0.4);
    mul(plugin[snow].rainwidth,     rain_size);
    set(plugin[snow].rainalpha,     0.5);
    set(plugin[snow].wind,          2.0);
  );
  if(device.flash,
		copy(plugin[snow].url,          plugin_url.SNOW_SWF);
    ,
		copy(plugin[snow].url,          plugin_url.SNOW_JS);
  );
</action>
<action name="remove_rain">
  removeplugin(snow);
</action>
<action name="add_snow">

  if(%1 === null,
    set(snow_size, 2);
    ,
    set(snow_size, %1);
  );

  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    copy(plugin[snow].imageurl,      settings.snow_image);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        1500);
    mul(plugin[snow].flakes,        snow_size);
    set(plugin[snow].color,         0xdfe3e4);
    set(plugin[snow].speed,         get(snow_size));
    mul(plugin[snow].speed,         snow_size);
    add(plugin[snow].speed,         1);
    set(plugin[snow].shake,         4.0);
    set(plugin[snow].speedvariance, 2.0);
    set(plugin[snow].spreading,     4.0);
    set(plugin[snow].wind,          1.0);
    sub(plugin[snow].wind,          snow_size);
  );

  if(device.flash,
		copy(plugin[snow].url,          plugin_url.SNOW_SWF);
    ,
		copy(plugin[snow].url,          plugin_url.SNOW_JS);
  );


</action>
<action name="add_image_rain">

  if(%2 == null ,
    set(snow_size, 2);
    ,
    set(snow_size, %2);
  );


  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    set(plugin[snow].imageurl,      %1);
    set(plugin[snow].imagescale,    0.5);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        150);
    mul(plugin[snow].flakes,        snow_size);
    set(plugin[snow].color,         0xdfe3e4);
    add(plugin[snow].speed,         0.5);
    set(plugin[snow].shake,         1.0);
    set(plugin[snow].speedvariance, 2.0);
    set(plugin[snow].spreading,     1.5);
    set(plugin[snow].wind,          0);
  );
  if(device.flash,
		copy(plugin[snow].url,          plugin_url.SNOW_SWF);
    ,
		copy(plugin[snow].url,          plugin_url.SNOW_JS);
  );

</action>

<action name="update_bgcolor">
  set(hotspot[%1].bgcolor, %2);
</action>
 
<action name="update_backgroundalpha">
  set(hotspot[%1].backgroundalpha, %2);
</action>

<action name="update_color">
  set(css,get(hotspot[%1].css));
  
  indexoftxt(startIndex,get(css),'color');
  if(startIndex GE 0,
    indexoftxt(endIndex,get(css),';',get(startIndex));
    add(endIndex,1);
    calc(startSrc,substr(get(css),0,startIndex));
    calc(endSrc,substr(get(css),endIndex));
    set(newcss,get(startSrc));
    txtadd(newcss,get(endSrc));
  ,
    set(newcss,get(css));
  );

  txtadd(newcss, 'color:');
  txtadd(newcss, %2);
  txtadd(newcss, ';');

  set(hotspot[%1].css,get(newcss))
</action>


<action name="update_font_size">
  set(css,get(hotspot[%1].css));
  
  indexoftxt(startIndex,get(css),'font-size');
  if(startIndex GE 0,
    indexoftxt(endIndex,get(css),';',get(startIndex));
    add(endIndex,1);
    calc(startSrc,substr(get(css),0,startIndex));
    calc(endSrc,substr(get(css),endIndex));
    set(newcss,get(startSrc));
    txtadd(newcss,get(endSrc));
  ,
    set(newcss,get(css));
  );

  txtadd(newcss, 'font-size:');
  txtadd(newcss, %2);
  txtadd(newcss, 'px;');

  set(hotspot[%1].css,get(newcss))
</action>

<action name="add_embed_txt_default">
  addhotspot(%1);
  set(hotspot[%1].embedTxt,true);
  set(hotspot[%1].ath,%3);
  set(hotspot[%1].atv,%4);
  set(hotspot[%1].scale,1);
  set(hotspot[%1].keep,false);
  set(hotspot[%1].type,text);

  set(hotspot[%1].html,%2);
  txtreplace(hotspot[%1].html,'&#xA;','[br]');
  set(hotspot[%1].bgcolor,#000000);
  set(hotspot[%1].backgroundalpha,0.5);
  set(hotspot[%1].roundedge,5);
  set(hotspot[%1].padding,10);
  set(hotspot[%1].multiline,true);
  set(hotspot[%1].oy,-9);
  set(hotspot[%1].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;textAlign:center;);
  set(hotspot[%1].edge,bottom);
  set(hotspot[%1].handcursor, false);
  set(hotspot[%1].enabled, false);
  set(hotspot[%1].renderer,"css3d");
  set(hotspot[%1].zorder2, 1.0);
  set(hotspot[%1].parent,'embed_container');

  set(embed_txt_bg_name,%1);
  txtadd(embed_txt_bg_name,"_bg");
  addhotspot(get(embed_txt_bg_name));
  copy(hotspot[get(embed_txt_bg_name)].url, settings.embed_txt_image);
  copy(hotspot[get(embed_txt_bg_name)].ath,hotspot[%1].ath);
  copy(hotspot[get(embed_txt_bg_name)].atv,hotspot[%1].atv);
  set(hotspot[get(embed_txt_bg_name)].keep,false);
  set(hotspot[get(embed_txt_bg_name)].scale,0.5);
  set(hotspot[get(embed_txt_bg_name)].edge,top);
  if(device.mobile == true,
    set(hotspot[get(embed_txt_bg_name)].oy,-6);
    ,
    set(hotspot[get(embed_txt_bg_name)].oy,-9);
  );
  set(hotspot[get(embed_txt_bg_name)].handcursor, false);
  set(hotspot[get(embed_txt_bg_name)].enabled, false);
  set(hotspot[get(embed_txt_bg_name)].renderer, 'css3d');
  set(hotspot[get(embed_txt_bg_name)].isActiveHotspot,true);
  set(hotspot[get(embed_txt_bg_name)].parent,get(embed_container));
</action>
  
<action name="add_embed_txt_line">
    addhotspot(%1);
    if(%3,
        set(hotspot[%1].ath,%3);
        ,
        set(hotspot[%1].ath,get(view.hlookat));
    );
    if(%4,
        set(hotspot[%1].atv,%4);
        ,
        set(hotspot[%1].atv,get(view.vlookat));
    );
    set(hotspot[%1].scale,1);
    set(hotspot[%1].embedTxt,true);
    set(hotspot[%1].type,text);
    set(hotspot[%1].keep,false);
    set(hotspot[%1].html,%2);
    set(hotspot[%1].bgcolor, %5);
    set(hotspot[%1].backgroundalpha,%6);
    set(hotspot_css,'font-family:STXihei; letter-spacing:1px;textAlign:center;');
    
    txtadd(hotspot_css, 'color:');
    txtadd(hotspot_css, %7);
    txtadd(hotspot_css, ';');

    txtadd(hotspot_css, 'font-size:');
    txtadd(hotspot_css, %8);
    txtadd(hotspot_css, 'px;');
    copy(hotspot[%1].css, hotspot_css);

    set(hotspot[%1].borderwidth,1.0);
    set(hotspot[%1].bordercolor,0xfad057); 
    set(hotspot[%1].bgroundedge,5);
    set(hotspot[%1].padding,10);
    
    set(hotspot[%1].renderer,"css3d");
    
    set(hotspot[%1].edge,bottom);

    set(hotspot[%1].onup,
      jscall(calc('window.onKrpEmbedMoveEnd("'+ name + '",' + ath + ',' + atv + ')'));
    );
    set(hotspot[%1].ondown,drag_enable_embed_txt(););
    set(hotspot[%1].onclick,
      jscall(calc('window.onKrpEmbedClick("'+ name + '")'));
    );


    set(embed_txt_bg_name,%1);
    txtadd(embed_txt_bg_name,"_bg");
    addhotspot(get(embed_txt_bg_name));
    set(hotspot[get(embed_txt_bg_name)].url,'https://ssl-player.720static.com/krp/embed.png');
    copy(hotspot[get(embed_txt_bg_name)].ath,hotspot[%1].ath);
    copy(hotspot[get(embed_txt_bg_name)].atv,hotspot[%1].atv);
    set(hotspot[get(embed_txt_bg_name)].keep,false);
    set(hotspot[get(embed_txt_bg_name)].scale,0.5);
    set(hotspot[get(embed_txt_bg_name)].edge,top);
    
    
</action>
<action name="remove_all_embed_txt">
  def(arr,array);
  def(arrIndex,number,0);
  trace(arr);
  for(set(i,0),i LT hotspot.count,inc(i),
    if(hotspot[get(i)].embedTxt,
      set(arr[get(arrIndex)],get(hotspot[get(i)].name));
      add(arrIndex,1)
    );
  );
  for(set(i,0),i LT arrIndex,inc(i),
      set(id,get(arr[get(i)]));
      removehotspot(get(id));
      txtadd(id,"_bg");
      removehotspot(get(id));
  );
</action></krpano>
